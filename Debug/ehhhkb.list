
ehhhkb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006668  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080067f0  080067f0  000167f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006848  08006848  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  08006848  08006848  00016848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006850  08006850  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006850  08006850  00016850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006854  08006854  00016854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08006858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020184  2**0
                  CONTENTS
 10 .bss          0000095c  20000184  20000184  00020184  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ae0  20000ae0  00020184  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001593c  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fa7  00000000  00000000  00035af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf0  00000000  00000000  00038a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bd8  00000000  00000000  00039788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000215a4  00000000  00000000  0003a360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011563  00000000  00000000  0005b904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bbbe9  00000000  00000000  0006ce67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00128a50  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003434  00000000  00000000  00128aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000184 	.word	0x20000184
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080067d8 	.word	0x080067d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000188 	.word	0x20000188
 80001c4:	080067d8 	.word	0x080067d8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fa70 	bl	80009a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f808 	bl	80004dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f89a 	bl	8000604 <MX_GPIO_Init>
  MX_UART5_Init();
 80004d0:	f000 f86e 	bl	80005b0 <MX_UART5_Init>
  MX_USB_DEVICE_Init();
 80004d4:	f005 fcf0 	bl	8005eb8 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <main+0x18>
	...

080004dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b094      	sub	sp, #80	; 0x50
 80004e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e2:	f107 0320 	add.w	r3, r7, #32
 80004e6:	2230      	movs	r2, #48	; 0x30
 80004e8:	2100      	movs	r1, #0
 80004ea:	4618      	mov	r0, r3
 80004ec:	f006 f96c 	bl	80067c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f0:	f107 030c 	add.w	r3, r7, #12
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000500:	2300      	movs	r3, #0
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	4b28      	ldr	r3, [pc, #160]	; (80005a8 <SystemClock_Config+0xcc>)
 8000506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000508:	4a27      	ldr	r2, [pc, #156]	; (80005a8 <SystemClock_Config+0xcc>)
 800050a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800050e:	6413      	str	r3, [r2, #64]	; 0x40
 8000510:	4b25      	ldr	r3, [pc, #148]	; (80005a8 <SystemClock_Config+0xcc>)
 8000512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800051c:	2300      	movs	r3, #0
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	4b22      	ldr	r3, [pc, #136]	; (80005ac <SystemClock_Config+0xd0>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a21      	ldr	r2, [pc, #132]	; (80005ac <SystemClock_Config+0xd0>)
 8000526:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800052a:	6013      	str	r3, [r2, #0]
 800052c:	4b1f      	ldr	r3, [pc, #124]	; (80005ac <SystemClock_Config+0xd0>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000538:	2301      	movs	r3, #1
 800053a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800053c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000540:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000542:	2302      	movs	r3, #2
 8000544:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000546:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800054a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800054c:	2310      	movs	r3, #16
 800054e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000550:	23c0      	movs	r3, #192	; 0xc0
 8000552:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000554:	2302      	movs	r3, #2
 8000556:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000558:	2304      	movs	r3, #4
 800055a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055c:	f107 0320 	add.w	r3, r7, #32
 8000560:	4618      	mov	r0, r3
 8000562:	f001 fee9 	bl	8002338 <HAL_RCC_OscConfig>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800056c:	f000 f916 	bl	800079c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000570:	230f      	movs	r3, #15
 8000572:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000574:	2302      	movs	r3, #2
 8000576:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800057c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000580:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000582:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000586:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	2103      	movs	r1, #3
 800058e:	4618      	mov	r0, r3
 8000590:	f002 f94a 	bl	8002828 <HAL_RCC_ClockConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800059a:	f000 f8ff 	bl	800079c <Error_Handler>
  }
}
 800059e:	bf00      	nop
 80005a0:	3750      	adds	r7, #80	; 0x50
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40023800 	.word	0x40023800
 80005ac:	40007000 	.word	0x40007000

080005b0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80005b4:	4b11      	ldr	r3, [pc, #68]	; (80005fc <MX_UART5_Init+0x4c>)
 80005b6:	4a12      	ldr	r2, [pc, #72]	; (8000600 <MX_UART5_Init+0x50>)
 80005b8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80005ba:	4b10      	ldr	r3, [pc, #64]	; (80005fc <MX_UART5_Init+0x4c>)
 80005bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005c0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <MX_UART5_Init+0x4c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <MX_UART5_Init+0x4c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80005ce:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <MX_UART5_Init+0x4c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <MX_UART5_Init+0x4c>)
 80005d6:	220c      	movs	r2, #12
 80005d8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005da:	4b08      	ldr	r3, [pc, #32]	; (80005fc <MX_UART5_Init+0x4c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <MX_UART5_Init+0x4c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80005e6:	4805      	ldr	r0, [pc, #20]	; (80005fc <MX_UART5_Init+0x4c>)
 80005e8:	f002 fb18 	bl	8002c1c <HAL_UART_Init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80005f2:	f000 f8d3 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	200001c0 	.word	0x200001c0
 8000600:	40005000 	.word	0x40005000

08000604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	; 0x28
 8000608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
 800061e:	4b5b      	ldr	r3, [pc, #364]	; (800078c <MX_GPIO_Init+0x188>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a5a      	ldr	r2, [pc, #360]	; (800078c <MX_GPIO_Init+0x188>)
 8000624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b58      	ldr	r3, [pc, #352]	; (800078c <MX_GPIO_Init+0x188>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	4b54      	ldr	r3, [pc, #336]	; (800078c <MX_GPIO_Init+0x188>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a53      	ldr	r2, [pc, #332]	; (800078c <MX_GPIO_Init+0x188>)
 8000640:	f043 0304 	orr.w	r3, r3, #4
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b51      	ldr	r3, [pc, #324]	; (800078c <MX_GPIO_Init+0x188>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0304 	and.w	r3, r3, #4
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	4b4d      	ldr	r3, [pc, #308]	; (800078c <MX_GPIO_Init+0x188>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a4c      	ldr	r2, [pc, #304]	; (800078c <MX_GPIO_Init+0x188>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b4a      	ldr	r3, [pc, #296]	; (800078c <MX_GPIO_Init+0x188>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	4b46      	ldr	r3, [pc, #280]	; (800078c <MX_GPIO_Init+0x188>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a45      	ldr	r2, [pc, #276]	; (800078c <MX_GPIO_Init+0x188>)
 8000678:	f043 0302 	orr.w	r3, r3, #2
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b43      	ldr	r3, [pc, #268]	; (800078c <MX_GPIO_Init+0x188>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0302 	and.w	r3, r3, #2
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	4b3f      	ldr	r3, [pc, #252]	; (800078c <MX_GPIO_Init+0x188>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a3e      	ldr	r2, [pc, #248]	; (800078c <MX_GPIO_Init+0x188>)
 8000694:	f043 0308 	orr.w	r3, r3, #8
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b3c      	ldr	r3, [pc, #240]	; (800078c <MX_GPIO_Init+0x188>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0308 	and.w	r3, r3, #8
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, COL4_Pin|COL5_Pin|COL6_Pin|COL9_Pin
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 80006ac:	4838      	ldr	r0, [pc, #224]	; (8000790 <MX_GPIO_Init+0x18c>)
 80006ae:	f000 fcbf 	bl	8001030 <HAL_GPIO_WritePin>
                          |COL8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, COL1_Pin|COL2_Pin|COL3_Pin, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2107      	movs	r1, #7
 80006b6:	4837      	ldr	r0, [pc, #220]	; (8000794 <MX_GPIO_Init+0x190>)
 80006b8:	f000 fcba 	bl	8001030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(COL7_GPIO_Port, COL7_Pin, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c2:	4835      	ldr	r0, [pc, #212]	; (8000798 <MX_GPIO_Init+0x194>)
 80006c4:	f000 fcb4 	bl	8001030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ROW5_Pin */
  GPIO_InitStruct.Pin = ROW5_Pin;
 80006c8:	2301      	movs	r3, #1
 80006ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006d0:	2302      	movs	r3, #2
 80006d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ROW5_GPIO_Port, &GPIO_InitStruct);
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	4619      	mov	r1, r3
 80006da:	482d      	ldr	r0, [pc, #180]	; (8000790 <MX_GPIO_Init+0x18c>)
 80006dc:	f000 fb0c 	bl	8000cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL4_Pin COL5_Pin COL6_Pin COL9_Pin
                           COL8_Pin */
  GPIO_InitStruct.Pin = COL4_Pin|COL5_Pin|COL6_Pin|COL9_Pin
 80006e0:	f44f 73c7 	mov.w	r3, #398	; 0x18e
 80006e4:	617b      	str	r3, [r7, #20]
                          |COL8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e6:	2301      	movs	r3, #1
 80006e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ee:	2302      	movs	r3, #2
 80006f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4619      	mov	r1, r3
 80006f8:	4825      	ldr	r0, [pc, #148]	; (8000790 <MX_GPIO_Init+0x18c>)
 80006fa:	f000 fafd 	bl	8000cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin;
 80006fe:	2307      	movs	r3, #7
 8000700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000702:	2301      	movs	r3, #1
 8000704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800070a:	2302      	movs	r3, #2
 800070c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	4619      	mov	r1, r3
 8000714:	481f      	ldr	r0, [pc, #124]	; (8000794 <MX_GPIO_Init+0x190>)
 8000716:	f000 faef 	bl	8000cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW1_Pin ROW2_Pin ROW4_Pin ROW3_Pin */
  GPIO_InitStruct.Pin = ROW1_Pin|ROW2_Pin|ROW4_Pin|ROW3_Pin;
 800071a:	2378      	movs	r3, #120	; 0x78
 800071c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071e:	2300      	movs	r3, #0
 8000720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000722:	2302      	movs	r3, #2
 8000724:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	4819      	ldr	r0, [pc, #100]	; (8000794 <MX_GPIO_Init+0x190>)
 800072e:	f000 fae3 	bl	8000cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : COL7_Pin */
  GPIO_InitStruct.Pin = COL7_Pin;
 8000732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	2301      	movs	r3, #1
 800073a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000740:	2302      	movs	r3, #2
 8000742:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(COL7_GPIO_Port, &GPIO_InitStruct);
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	4619      	mov	r1, r3
 800074a:	4813      	ldr	r0, [pc, #76]	; (8000798 <MX_GPIO_Init+0x194>)
 800074c:	f000 fad4 	bl	8000cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW6_Pin ROW7_Pin ROW8_Pin */
  GPIO_InitStruct.Pin = ROW6_Pin|ROW7_Pin|ROW8_Pin;
 8000750:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000756:	2300      	movs	r3, #0
 8000758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800075a:	2302      	movs	r3, #2
 800075c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	4619      	mov	r1, r3
 8000764:	480c      	ldr	r0, [pc, #48]	; (8000798 <MX_GPIO_Init+0x194>)
 8000766:	f000 fac7 	bl	8000cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROW9_Pin */
  GPIO_InitStruct.Pin = ROW9_Pin;
 800076a:	2340      	movs	r3, #64	; 0x40
 800076c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ROW9_GPIO_Port, &GPIO_InitStruct);
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4619      	mov	r1, r3
 800077c:	4804      	ldr	r0, [pc, #16]	; (8000790 <MX_GPIO_Init+0x18c>)
 800077e:	f000 fabb 	bl	8000cf8 <HAL_GPIO_Init>

}
 8000782:	bf00      	nop
 8000784:	3728      	adds	r7, #40	; 0x28
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800
 8000790:	40020800 	.word	0x40020800
 8000794:	40020000 	.word	0x40020000
 8000798:	40020400 	.word	0x40020400

0800079c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a0:	b672      	cpsid	i
}
 80007a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <Error_Handler+0x8>
	...

080007a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <HAL_MspInit+0x4c>)
 80007b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b6:	4a0f      	ldr	r2, [pc, #60]	; (80007f4 <HAL_MspInit+0x4c>)
 80007b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007bc:	6453      	str	r3, [r2, #68]	; 0x44
 80007be:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <HAL_MspInit+0x4c>)
 80007c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <HAL_MspInit+0x4c>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d2:	4a08      	ldr	r2, [pc, #32]	; (80007f4 <HAL_MspInit+0x4c>)
 80007d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d8:	6413      	str	r3, [r2, #64]	; 0x40
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <HAL_MspInit+0x4c>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800

080007f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	; 0x28
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a28      	ldr	r2, [pc, #160]	; (80008b8 <HAL_UART_MspInit+0xc0>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d14a      	bne.n	80008b0 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	4b27      	ldr	r3, [pc, #156]	; (80008bc <HAL_UART_MspInit+0xc4>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	4a26      	ldr	r2, [pc, #152]	; (80008bc <HAL_UART_MspInit+0xc4>)
 8000824:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000828:	6413      	str	r3, [r2, #64]	; 0x40
 800082a:	4b24      	ldr	r3, [pc, #144]	; (80008bc <HAL_UART_MspInit+0xc4>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	4b20      	ldr	r3, [pc, #128]	; (80008bc <HAL_UART_MspInit+0xc4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a1f      	ldr	r2, [pc, #124]	; (80008bc <HAL_UART_MspInit+0xc4>)
 8000840:	f043 0304 	orr.w	r3, r3, #4
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <HAL_UART_MspInit+0xc4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0304 	and.w	r3, r3, #4
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b19      	ldr	r3, [pc, #100]	; (80008bc <HAL_UART_MspInit+0xc4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a18      	ldr	r2, [pc, #96]	; (80008bc <HAL_UART_MspInit+0xc4>)
 800085c:	f043 0308 	orr.w	r3, r3, #8
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <HAL_UART_MspInit+0xc4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0308 	and.w	r3, r3, #8
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800086e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000874:	2302      	movs	r3, #2
 8000876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087c:	2303      	movs	r3, #3
 800087e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000880:	2308      	movs	r3, #8
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	480d      	ldr	r0, [pc, #52]	; (80008c0 <HAL_UART_MspInit+0xc8>)
 800088c:	f000 fa34 	bl	8000cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000890:	2304      	movs	r3, #4
 8000892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000894:	2302      	movs	r3, #2
 8000896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089c:	2303      	movs	r3, #3
 800089e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80008a0:	2308      	movs	r3, #8
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	4806      	ldr	r0, [pc, #24]	; (80008c4 <HAL_UART_MspInit+0xcc>)
 80008ac:	f000 fa24 	bl	8000cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80008b0:	bf00      	nop
 80008b2:	3728      	adds	r7, #40	; 0x28
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40005000 	.word	0x40005000
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020800 	.word	0x40020800
 80008c4:	40020c00 	.word	0x40020c00

080008c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <NMI_Handler+0x4>

080008ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <HardFault_Handler+0x4>

080008d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <MemManage_Handler+0x4>

080008da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <BusFault_Handler+0x4>

080008e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <UsageFault_Handler+0x4>

080008e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000914:	f000 f89a 	bl	8000a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}

0800091c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000920:	4802      	ldr	r0, [pc, #8]	; (800092c <OTG_FS_IRQHandler+0x10>)
 8000922:	f000 fcee 	bl	8001302 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200006d8 	.word	0x200006d8

08000930 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <SystemInit+0x20>)
 8000936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800093a:	4a05      	ldr	r2, [pc, #20]	; (8000950 <SystemInit+0x20>)
 800093c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000940:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000954:	f8df d034 	ldr.w	sp, [pc, #52]	; 800098c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000958:	480d      	ldr	r0, [pc, #52]	; (8000990 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800095a:	490e      	ldr	r1, [pc, #56]	; (8000994 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800095c:	4a0e      	ldr	r2, [pc, #56]	; (8000998 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000960:	e002      	b.n	8000968 <LoopCopyDataInit>

08000962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000966:	3304      	adds	r3, #4

08000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800096c:	d3f9      	bcc.n	8000962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096e:	4a0b      	ldr	r2, [pc, #44]	; (800099c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000970:	4c0b      	ldr	r4, [pc, #44]	; (80009a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000974:	e001      	b.n	800097a <LoopFillZerobss>

08000976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000978:	3204      	adds	r2, #4

0800097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800097c:	d3fb      	bcc.n	8000976 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800097e:	f7ff ffd7 	bl	8000930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000982:	f005 fefd 	bl	8006780 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000986:	f7ff fd9b 	bl	80004c0 <main>
  bx  lr    
 800098a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800098c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000994:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000998:	08006858 	.word	0x08006858
  ldr r2, =_sbss
 800099c:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80009a0:	20000ae0 	.word	0x20000ae0

080009a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a4:	e7fe      	b.n	80009a4 <ADC_IRQHandler>
	...

080009a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009ac:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <HAL_Init+0x40>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a0d      	ldr	r2, [pc, #52]	; (80009e8 <HAL_Init+0x40>)
 80009b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <HAL_Init+0x40>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <HAL_Init+0x40>)
 80009be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <HAL_Init+0x40>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a07      	ldr	r2, [pc, #28]	; (80009e8 <HAL_Init+0x40>)
 80009ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d0:	2003      	movs	r0, #3
 80009d2:	f000 f94f 	bl	8000c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009d6:	200f      	movs	r0, #15
 80009d8:	f000 f808 	bl	80009ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009dc:	f7ff fee4 	bl	80007a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023c00 	.word	0x40023c00

080009ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <HAL_InitTick+0x54>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_InitTick+0x58>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	4619      	mov	r1, r3
 80009fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 f967 	bl	8000cde <HAL_SYSTICK_Config>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e00e      	b.n	8000a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2b0f      	cmp	r3, #15
 8000a1e:	d80a      	bhi.n	8000a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a20:	2200      	movs	r2, #0
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	f04f 30ff 	mov.w	r0, #4294967295
 8000a28:	f000 f92f 	bl	8000c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a2c:	4a06      	ldr	r2, [pc, #24]	; (8000a48 <HAL_InitTick+0x5c>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a32:	2300      	movs	r3, #0
 8000a34:	e000      	b.n	8000a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000000 	.word	0x20000000
 8000a44:	20000008 	.word	0x20000008
 8000a48:	20000004 	.word	0x20000004

08000a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_IncTick+0x20>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_IncTick+0x24>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <HAL_IncTick+0x24>)
 8000a5e:	6013      	str	r3, [r2, #0]
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	20000204 	.word	0x20000204

08000a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return uwTick;
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <HAL_GetTick+0x14>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	20000204 	.word	0x20000204

08000a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a94:	f7ff ffee 	bl	8000a74 <HAL_GetTick>
 8000a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa4:	d005      	beq.n	8000ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <HAL_Delay+0x44>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	4413      	add	r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ab2:	bf00      	nop
 8000ab4:	f7ff ffde 	bl	8000a74 <HAL_GetTick>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d8f7      	bhi.n	8000ab4 <HAL_Delay+0x28>
  {
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000008 	.word	0x20000008

08000ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af0:	4013      	ands	r3, r2
 8000af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b06:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	60d3      	str	r3, [r2, #12]
}
 8000b0c:	bf00      	nop
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <__NVIC_GetPriorityGrouping+0x18>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	f003 0307 	and.w	r3, r3, #7
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	db0b      	blt.n	8000b62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	f003 021f 	and.w	r2, r3, #31
 8000b50:	4907      	ldr	r1, [pc, #28]	; (8000b70 <__NVIC_EnableIRQ+0x38>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	095b      	lsrs	r3, r3, #5
 8000b58:	2001      	movs	r0, #1
 8000b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000e100 	.word	0xe000e100

08000b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	6039      	str	r1, [r7, #0]
 8000b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	db0a      	blt.n	8000b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	490c      	ldr	r1, [pc, #48]	; (8000bc0 <__NVIC_SetPriority+0x4c>)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	0112      	lsls	r2, r2, #4
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	440b      	add	r3, r1
 8000b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b9c:	e00a      	b.n	8000bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4908      	ldr	r1, [pc, #32]	; (8000bc4 <__NVIC_SetPriority+0x50>)
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	f003 030f 	and.w	r3, r3, #15
 8000baa:	3b04      	subs	r3, #4
 8000bac:	0112      	lsls	r2, r2, #4
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	440b      	add	r3, r1
 8000bb2:	761a      	strb	r2, [r3, #24]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000e100 	.word	0xe000e100
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b089      	sub	sp, #36	; 0x24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	f1c3 0307 	rsb	r3, r3, #7
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	bf28      	it	cs
 8000be6:	2304      	movcs	r3, #4
 8000be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3304      	adds	r3, #4
 8000bee:	2b06      	cmp	r3, #6
 8000bf0:	d902      	bls.n	8000bf8 <NVIC_EncodePriority+0x30>
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3b03      	subs	r3, #3
 8000bf6:	e000      	b.n	8000bfa <NVIC_EncodePriority+0x32>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43da      	mvns	r2, r3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c10:	f04f 31ff 	mov.w	r1, #4294967295
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1a:	43d9      	mvns	r1, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	4313      	orrs	r3, r2
         );
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3724      	adds	r7, #36	; 0x24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
	...

08000c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c40:	d301      	bcc.n	8000c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c42:	2301      	movs	r3, #1
 8000c44:	e00f      	b.n	8000c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <SysTick_Config+0x40>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c4e:	210f      	movs	r1, #15
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295
 8000c54:	f7ff ff8e 	bl	8000b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <SysTick_Config+0x40>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5e:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <SysTick_Config+0x40>)
 8000c60:	2207      	movs	r2, #7
 8000c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	e000e010 	.word	0xe000e010

08000c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff ff29 	bl	8000ad4 <__NVIC_SetPriorityGrouping>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b086      	sub	sp, #24
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
 8000c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c9c:	f7ff ff3e 	bl	8000b1c <__NVIC_GetPriorityGrouping>
 8000ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	68b9      	ldr	r1, [r7, #8]
 8000ca6:	6978      	ldr	r0, [r7, #20]
 8000ca8:	f7ff ff8e 	bl	8000bc8 <NVIC_EncodePriority>
 8000cac:	4602      	mov	r2, r0
 8000cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff5d 	bl	8000b74 <__NVIC_SetPriority>
}
 8000cba:	bf00      	nop
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	4603      	mov	r3, r0
 8000cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff31 	bl	8000b38 <__NVIC_EnableIRQ>
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff ffa2 	bl	8000c30 <SysTick_Config>
 8000cec:	4603      	mov	r3, r0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b089      	sub	sp, #36	; 0x24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
 8000d12:	e16b      	b.n	8000fec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d14:	2201      	movs	r2, #1
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	697a      	ldr	r2, [r7, #20]
 8000d24:	4013      	ands	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	f040 815a 	bne.w	8000fe6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f003 0303 	and.w	r3, r3, #3
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d005      	beq.n	8000d4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d130      	bne.n	8000dac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	2203      	movs	r2, #3
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	68da      	ldr	r2, [r3, #12]
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d80:	2201      	movs	r2, #1
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	091b      	lsrs	r3, r3, #4
 8000d96:	f003 0201 	and.w	r2, r3, #1
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 0303 	and.w	r3, r3, #3
 8000db4:	2b03      	cmp	r3, #3
 8000db6:	d017      	beq.n	8000de8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	689a      	ldr	r2, [r3, #8]
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 0303 	and.w	r3, r3, #3
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d123      	bne.n	8000e3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	08da      	lsrs	r2, r3, #3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3208      	adds	r2, #8
 8000dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	f003 0307 	and.w	r3, r3, #7
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	220f      	movs	r2, #15
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4013      	ands	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	691a      	ldr	r2, [r3, #16]
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	08da      	lsrs	r2, r3, #3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	3208      	adds	r2, #8
 8000e36:	69b9      	ldr	r1, [r7, #24]
 8000e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	2203      	movs	r2, #3
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0203 	and.w	r2, r3, #3
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f000 80b4 	beq.w	8000fe6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	4b60      	ldr	r3, [pc, #384]	; (8001004 <HAL_GPIO_Init+0x30c>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	4a5f      	ldr	r2, [pc, #380]	; (8001004 <HAL_GPIO_Init+0x30c>)
 8000e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8e:	4b5d      	ldr	r3, [pc, #372]	; (8001004 <HAL_GPIO_Init+0x30c>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e9a:	4a5b      	ldr	r2, [pc, #364]	; (8001008 <HAL_GPIO_Init+0x310>)
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	089b      	lsrs	r3, r3, #2
 8000ea0:	3302      	adds	r3, #2
 8000ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f003 0303 	and.w	r3, r3, #3
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	220f      	movs	r2, #15
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a52      	ldr	r2, [pc, #328]	; (800100c <HAL_GPIO_Init+0x314>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d02b      	beq.n	8000f1e <HAL_GPIO_Init+0x226>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a51      	ldr	r2, [pc, #324]	; (8001010 <HAL_GPIO_Init+0x318>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d025      	beq.n	8000f1a <HAL_GPIO_Init+0x222>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a50      	ldr	r2, [pc, #320]	; (8001014 <HAL_GPIO_Init+0x31c>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d01f      	beq.n	8000f16 <HAL_GPIO_Init+0x21e>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a4f      	ldr	r2, [pc, #316]	; (8001018 <HAL_GPIO_Init+0x320>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d019      	beq.n	8000f12 <HAL_GPIO_Init+0x21a>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a4e      	ldr	r2, [pc, #312]	; (800101c <HAL_GPIO_Init+0x324>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d013      	beq.n	8000f0e <HAL_GPIO_Init+0x216>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a4d      	ldr	r2, [pc, #308]	; (8001020 <HAL_GPIO_Init+0x328>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d00d      	beq.n	8000f0a <HAL_GPIO_Init+0x212>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a4c      	ldr	r2, [pc, #304]	; (8001024 <HAL_GPIO_Init+0x32c>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d007      	beq.n	8000f06 <HAL_GPIO_Init+0x20e>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a4b      	ldr	r2, [pc, #300]	; (8001028 <HAL_GPIO_Init+0x330>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d101      	bne.n	8000f02 <HAL_GPIO_Init+0x20a>
 8000efe:	2307      	movs	r3, #7
 8000f00:	e00e      	b.n	8000f20 <HAL_GPIO_Init+0x228>
 8000f02:	2308      	movs	r3, #8
 8000f04:	e00c      	b.n	8000f20 <HAL_GPIO_Init+0x228>
 8000f06:	2306      	movs	r3, #6
 8000f08:	e00a      	b.n	8000f20 <HAL_GPIO_Init+0x228>
 8000f0a:	2305      	movs	r3, #5
 8000f0c:	e008      	b.n	8000f20 <HAL_GPIO_Init+0x228>
 8000f0e:	2304      	movs	r3, #4
 8000f10:	e006      	b.n	8000f20 <HAL_GPIO_Init+0x228>
 8000f12:	2303      	movs	r3, #3
 8000f14:	e004      	b.n	8000f20 <HAL_GPIO_Init+0x228>
 8000f16:	2302      	movs	r3, #2
 8000f18:	e002      	b.n	8000f20 <HAL_GPIO_Init+0x228>
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e000      	b.n	8000f20 <HAL_GPIO_Init+0x228>
 8000f1e:	2300      	movs	r3, #0
 8000f20:	69fa      	ldr	r2, [r7, #28]
 8000f22:	f002 0203 	and.w	r2, r2, #3
 8000f26:	0092      	lsls	r2, r2, #2
 8000f28:	4093      	lsls	r3, r2
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f30:	4935      	ldr	r1, [pc, #212]	; (8001008 <HAL_GPIO_Init+0x310>)
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	089b      	lsrs	r3, r3, #2
 8000f36:	3302      	adds	r3, #2
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f3e:	4b3b      	ldr	r3, [pc, #236]	; (800102c <HAL_GPIO_Init+0x334>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f62:	4a32      	ldr	r2, [pc, #200]	; (800102c <HAL_GPIO_Init+0x334>)
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f68:	4b30      	ldr	r3, [pc, #192]	; (800102c <HAL_GPIO_Init+0x334>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d003      	beq.n	8000f8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f8c:	4a27      	ldr	r2, [pc, #156]	; (800102c <HAL_GPIO_Init+0x334>)
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f92:	4b26      	ldr	r3, [pc, #152]	; (800102c <HAL_GPIO_Init+0x334>)
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fb6:	4a1d      	ldr	r2, [pc, #116]	; (800102c <HAL_GPIO_Init+0x334>)
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fbc:	4b1b      	ldr	r3, [pc, #108]	; (800102c <HAL_GPIO_Init+0x334>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d003      	beq.n	8000fe0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fe0:	4a12      	ldr	r2, [pc, #72]	; (800102c <HAL_GPIO_Init+0x334>)
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	61fb      	str	r3, [r7, #28]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	2b0f      	cmp	r3, #15
 8000ff0:	f67f ae90 	bls.w	8000d14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	bf00      	nop
 8000ff8:	3724      	adds	r7, #36	; 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40023800 	.word	0x40023800
 8001008:	40013800 	.word	0x40013800
 800100c:	40020000 	.word	0x40020000
 8001010:	40020400 	.word	0x40020400
 8001014:	40020800 	.word	0x40020800
 8001018:	40020c00 	.word	0x40020c00
 800101c:	40021000 	.word	0x40021000
 8001020:	40021400 	.word	0x40021400
 8001024:	40021800 	.word	0x40021800
 8001028:	40021c00 	.word	0x40021c00
 800102c:	40013c00 	.word	0x40013c00

08001030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	807b      	strh	r3, [r7, #2]
 800103c:	4613      	mov	r3, r2
 800103e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001040:	787b      	ldrb	r3, [r7, #1]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001046:	887a      	ldrh	r2, [r7, #2]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800104c:	e003      	b.n	8001056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800104e:	887b      	ldrh	r3, [r7, #2]
 8001050:	041a      	lsls	r2, r3, #16
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	619a      	str	r2, [r3, #24]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001062:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001064:	b08f      	sub	sp, #60	; 0x3c
 8001066:	af0a      	add	r7, sp, #40	; 0x28
 8001068:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d101      	bne.n	8001074 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e10f      	b.n	8001294 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b00      	cmp	r3, #0
 8001084:	d106      	bne.n	8001094 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f005 f874 	bl	800617c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2203      	movs	r2, #3
 8001098:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d102      	bne.n	80010ae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 f8dd 	bl	8003272 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	603b      	str	r3, [r7, #0]
 80010be:	687e      	ldr	r6, [r7, #4]
 80010c0:	466d      	mov	r5, sp
 80010c2:	f106 0410 	add.w	r4, r6, #16
 80010c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80010d6:	1d33      	adds	r3, r6, #4
 80010d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010da:	6838      	ldr	r0, [r7, #0]
 80010dc:	f001 ffb4 	bl	8003048 <USB_CoreInit>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d005      	beq.n	80010f2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2202      	movs	r2, #2
 80010ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e0d0      	b.n	8001294 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f002 f8cb 	bl	8003294 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010fe:	2300      	movs	r3, #0
 8001100:	73fb      	strb	r3, [r7, #15]
 8001102:	e04a      	b.n	800119a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001104:	7bfa      	ldrb	r2, [r7, #15]
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	4613      	mov	r3, r2
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	1a9b      	subs	r3, r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	333d      	adds	r3, #61	; 0x3d
 8001114:	2201      	movs	r2, #1
 8001116:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001118:	7bfa      	ldrb	r2, [r7, #15]
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	4613      	mov	r3, r2
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	1a9b      	subs	r3, r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	440b      	add	r3, r1
 8001126:	333c      	adds	r3, #60	; 0x3c
 8001128:	7bfa      	ldrb	r2, [r7, #15]
 800112a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800112c:	7bfa      	ldrb	r2, [r7, #15]
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	b298      	uxth	r0, r3
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	4613      	mov	r3, r2
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	1a9b      	subs	r3, r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	440b      	add	r3, r1
 800113e:	3342      	adds	r3, #66	; 0x42
 8001140:	4602      	mov	r2, r0
 8001142:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001144:	7bfa      	ldrb	r2, [r7, #15]
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	4613      	mov	r3, r2
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	1a9b      	subs	r3, r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	333f      	adds	r3, #63	; 0x3f
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001158:	7bfa      	ldrb	r2, [r7, #15]
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	4613      	mov	r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	1a9b      	subs	r3, r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	3344      	adds	r3, #68	; 0x44
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800116c:	7bfa      	ldrb	r2, [r7, #15]
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	4613      	mov	r3, r2
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	1a9b      	subs	r3, r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	3348      	adds	r3, #72	; 0x48
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001180:	7bfa      	ldrb	r2, [r7, #15]
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	4613      	mov	r3, r2
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	1a9b      	subs	r3, r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	3350      	adds	r3, #80	; 0x50
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	3301      	adds	r3, #1
 8001198:	73fb      	strb	r3, [r7, #15]
 800119a:	7bfa      	ldrb	r2, [r7, #15]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d3af      	bcc.n	8001104 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011a4:	2300      	movs	r3, #0
 80011a6:	73fb      	strb	r3, [r7, #15]
 80011a8:	e044      	b.n	8001234 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011aa:	7bfa      	ldrb	r2, [r7, #15]
 80011ac:	6879      	ldr	r1, [r7, #4]
 80011ae:	4613      	mov	r3, r2
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	1a9b      	subs	r3, r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	440b      	add	r3, r1
 80011b8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011c0:	7bfa      	ldrb	r2, [r7, #15]
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	4613      	mov	r3, r2
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	1a9b      	subs	r3, r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	440b      	add	r3, r1
 80011ce:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011d6:	7bfa      	ldrb	r2, [r7, #15]
 80011d8:	6879      	ldr	r1, [r7, #4]
 80011da:	4613      	mov	r3, r2
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	1a9b      	subs	r3, r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	440b      	add	r3, r1
 80011e4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011ec:	7bfa      	ldrb	r2, [r7, #15]
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	4613      	mov	r3, r2
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	1a9b      	subs	r3, r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	440b      	add	r3, r1
 80011fa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001202:	7bfa      	ldrb	r2, [r7, #15]
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	4613      	mov	r3, r2
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	1a9b      	subs	r3, r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	440b      	add	r3, r1
 8001210:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001218:	7bfa      	ldrb	r2, [r7, #15]
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	4613      	mov	r3, r2
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	1a9b      	subs	r3, r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	440b      	add	r3, r1
 8001226:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	3301      	adds	r3, #1
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	7bfa      	ldrb	r2, [r7, #15]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	429a      	cmp	r2, r3
 800123c:	d3b5      	bcc.n	80011aa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	687e      	ldr	r6, [r7, #4]
 8001246:	466d      	mov	r5, sp
 8001248:	f106 0410 	add.w	r4, r6, #16
 800124c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800124e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001250:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001252:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001254:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001258:	e885 0003 	stmia.w	r5, {r0, r1}
 800125c:	1d33      	adds	r3, r6, #4
 800125e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001260:	6838      	ldr	r0, [r7, #0]
 8001262:	f002 f863 	bl	800332c <USB_DevInit>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d005      	beq.n	8001278 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2202      	movs	r2, #2
 8001270:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e00d      	b.n	8001294 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2201      	movs	r2, #1
 8001284:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f003 f8df 	bl	8004450 <USB_DevDisconnect>

  return HAL_OK;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800129c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d101      	bne.n	80012b8 <HAL_PCD_Start+0x1c>
 80012b4:	2302      	movs	r3, #2
 80012b6:	e020      	b.n	80012fa <HAL_PCD_Start+0x5e>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2201      	movs	r2, #1
 80012bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d109      	bne.n	80012dc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d005      	beq.n	80012dc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f001 ffb5 	bl	8003250 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f003 f88f 	bl	800440e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001302:	b590      	push	{r4, r7, lr}
 8001304:	b08d      	sub	sp, #52	; 0x34
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001310:	6a3b      	ldr	r3, [r7, #32]
 8001312:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f003 f94d 	bl	80045b8 <USB_GetMode>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	f040 839d 	bne.w	8001a60 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f003 f8b1 	bl	8004492 <USB_ReadInterrupts>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 8393 	beq.w	8001a5e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f003 f8a8 	bl	8004492 <USB_ReadInterrupts>
 8001342:	4603      	mov	r3, r0
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b02      	cmp	r3, #2
 800134a:	d107      	bne.n	800135c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	695a      	ldr	r2, [r3, #20]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f002 0202 	and.w	r2, r2, #2
 800135a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f003 f896 	bl	8004492 <USB_ReadInterrupts>
 8001366:	4603      	mov	r3, r0
 8001368:	f003 0310 	and.w	r3, r3, #16
 800136c:	2b10      	cmp	r3, #16
 800136e:	d161      	bne.n	8001434 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	699a      	ldr	r2, [r3, #24]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0210 	bic.w	r2, r2, #16
 800137e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001380:	6a3b      	ldr	r3, [r7, #32]
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	f003 020f 	and.w	r2, r3, #15
 800138c:	4613      	mov	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	1a9b      	subs	r3, r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	4413      	add	r3, r2
 800139c:	3304      	adds	r3, #4
 800139e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	0c5b      	lsrs	r3, r3, #17
 80013a4:	f003 030f 	and.w	r3, r3, #15
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d124      	bne.n	80013f6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80013b2:	4013      	ands	r3, r2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d035      	beq.n	8001424 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	091b      	lsrs	r3, r3, #4
 80013c0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	461a      	mov	r2, r3
 80013ca:	6a38      	ldr	r0, [r7, #32]
 80013cc:	f002 fecd 	bl	800416a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	68da      	ldr	r2, [r3, #12]
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	091b      	lsrs	r3, r3, #4
 80013d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013dc:	441a      	add	r2, r3
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	699a      	ldr	r2, [r3, #24]
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	091b      	lsrs	r3, r3, #4
 80013ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013ee:	441a      	add	r2, r3
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	619a      	str	r2, [r3, #24]
 80013f4:	e016      	b.n	8001424 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	0c5b      	lsrs	r3, r3, #17
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	2b06      	cmp	r3, #6
 8001400:	d110      	bne.n	8001424 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001408:	2208      	movs	r2, #8
 800140a:	4619      	mov	r1, r3
 800140c:	6a38      	ldr	r0, [r7, #32]
 800140e:	f002 feac 	bl	800416a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	699a      	ldr	r2, [r3, #24]
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	091b      	lsrs	r3, r3, #4
 800141a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800141e:	441a      	add	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	699a      	ldr	r2, [r3, #24]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f042 0210 	orr.w	r2, r2, #16
 8001432:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f003 f82a 	bl	8004492 <USB_ReadInterrupts>
 800143e:	4603      	mov	r3, r0
 8001440:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001444:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001448:	d16e      	bne.n	8001528 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f003 f830 	bl	80044b8 <USB_ReadDevAllOutEpInterrupt>
 8001458:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800145a:	e062      	b.n	8001522 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800145c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b00      	cmp	r3, #0
 8001464:	d057      	beq.n	8001516 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	4611      	mov	r1, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f003 f855 	bl	8004520 <USB_ReadDevOutEPInterrupt>
 8001476:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00c      	beq.n	800149c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	015a      	lsls	r2, r3, #5
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	4413      	add	r3, r2
 800148a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800148e:	461a      	mov	r2, r3
 8001490:	2301      	movs	r3, #1
 8001492:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001494:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f000 fd98 	bl	8001fcc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00c      	beq.n	80014c0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	015a      	lsls	r2, r3, #5
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	4413      	add	r3, r2
 80014ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014b2:	461a      	mov	r2, r3
 80014b4:	2308      	movs	r3, #8
 80014b6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 fe92 	bl	80021e4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	f003 0310 	and.w	r3, r3, #16
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d008      	beq.n	80014dc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	015a      	lsls	r2, r3, #5
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	4413      	add	r3, r2
 80014d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014d6:	461a      	mov	r2, r3
 80014d8:	2310      	movs	r3, #16
 80014da:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	f003 0320 	and.w	r3, r3, #32
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d008      	beq.n	80014f8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	015a      	lsls	r2, r3, #5
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	4413      	add	r3, r2
 80014ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014f2:	461a      	mov	r2, r3
 80014f4:	2320      	movs	r3, #32
 80014f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d009      	beq.n	8001516 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	015a      	lsls	r2, r3, #5
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	4413      	add	r3, r2
 800150a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800150e:	461a      	mov	r2, r3
 8001510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001514:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	3301      	adds	r3, #1
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800151c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800151e:	085b      	lsrs	r3, r3, #1
 8001520:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001524:	2b00      	cmp	r3, #0
 8001526:	d199      	bne.n	800145c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f002 ffb0 	bl	8004492 <USB_ReadInterrupts>
 8001532:	4603      	mov	r3, r0
 8001534:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001538:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800153c:	f040 80c0 	bne.w	80016c0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f002 ffd1 	bl	80044ec <USB_ReadDevAllInEpInterrupt>
 800154a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001550:	e0b2      	b.n	80016b8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 80a7 	beq.w	80016ac <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	4611      	mov	r1, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f002 fff7 	bl	800455c <USB_ReadDevInEPInterrupt>
 800156e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b00      	cmp	r3, #0
 8001578:	d057      	beq.n	800162a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	f003 030f 	and.w	r3, r3, #15
 8001580:	2201      	movs	r2, #1
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800158e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	43db      	mvns	r3, r3
 8001594:	69f9      	ldr	r1, [r7, #28]
 8001596:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800159a:	4013      	ands	r3, r2
 800159c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	015a      	lsls	r2, r3, #5
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	4413      	add	r3, r2
 80015a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015aa:	461a      	mov	r2, r3
 80015ac:	2301      	movs	r3, #1
 80015ae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d132      	bne.n	800161e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015bc:	4613      	mov	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	1a9b      	subs	r3, r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	440b      	add	r3, r1
 80015c6:	3348      	adds	r3, #72	; 0x48
 80015c8:	6819      	ldr	r1, [r3, #0]
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ce:	4613      	mov	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	1a9b      	subs	r3, r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4403      	add	r3, r0
 80015d8:	3344      	adds	r3, #68	; 0x44
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4419      	add	r1, r3
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e2:	4613      	mov	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	1a9b      	subs	r3, r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4403      	add	r3, r0
 80015ec:	3348      	adds	r3, #72	; 0x48
 80015ee:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d113      	bne.n	800161e <HAL_PCD_IRQHandler+0x31c>
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015fa:	4613      	mov	r3, r2
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	1a9b      	subs	r3, r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	440b      	add	r3, r1
 8001604:	3350      	adds	r3, #80	; 0x50
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d108      	bne.n	800161e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6818      	ldr	r0, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001616:	461a      	mov	r2, r3
 8001618:	2101      	movs	r1, #1
 800161a:	f002 ffff 	bl	800461c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	b2db      	uxtb	r3, r3
 8001622:	4619      	mov	r1, r3
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f004 fe2a 	bl	800627e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	f003 0308 	and.w	r3, r3, #8
 8001630:	2b00      	cmp	r3, #0
 8001632:	d008      	beq.n	8001646 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	015a      	lsls	r2, r3, #5
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	4413      	add	r3, r2
 800163c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001640:	461a      	mov	r2, r3
 8001642:	2308      	movs	r3, #8
 8001644:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	2b00      	cmp	r3, #0
 800164e:	d008      	beq.n	8001662 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	015a      	lsls	r2, r3, #5
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	4413      	add	r3, r2
 8001658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800165c:	461a      	mov	r2, r3
 800165e:	2310      	movs	r3, #16
 8001660:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001668:	2b00      	cmp	r3, #0
 800166a:	d008      	beq.n	800167e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	015a      	lsls	r2, r3, #5
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	4413      	add	r3, r2
 8001674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001678:	461a      	mov	r2, r3
 800167a:	2340      	movs	r3, #64	; 0x40
 800167c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d008      	beq.n	800169a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	015a      	lsls	r2, r3, #5
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	4413      	add	r3, r2
 8001690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001694:	461a      	mov	r2, r3
 8001696:	2302      	movs	r3, #2
 8001698:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 fc03 	bl	8001eb2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80016ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ae:	3301      	adds	r3, #1
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b4:	085b      	lsrs	r3, r3, #1
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f47f af49 	bne.w	8001552 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f002 fee4 	bl	8004492 <USB_ReadInterrupts>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80016d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016d4:	d122      	bne.n	800171c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	69fa      	ldr	r2, [r7, #28]
 80016e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d108      	bne.n	8001706 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016fc:	2100      	movs	r1, #0
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 fe0e 	bl	8002320 <HAL_PCDEx_LPM_Callback>
 8001704:	e002      	b.n	800170c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f004 fe30 	bl	800636c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	695a      	ldr	r2, [r3, #20]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800171a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f002 feb6 	bl	8004492 <USB_ReadInterrupts>
 8001726:	4603      	mov	r3, r0
 8001728:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800172c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001730:	d112      	bne.n	8001758 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b01      	cmp	r3, #1
 8001740:	d102      	bne.n	8001748 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f004 fdec 	bl	8006320 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	695a      	ldr	r2, [r3, #20]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001756:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f002 fe98 	bl	8004492 <USB_ReadInterrupts>
 8001762:	4603      	mov	r3, r0
 8001764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800176c:	f040 80c7 	bne.w	80018fe <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	69fa      	ldr	r2, [r7, #28]
 800177a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800177e:	f023 0301 	bic.w	r3, r3, #1
 8001782:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2110      	movs	r1, #16
 800178a:	4618      	mov	r0, r3
 800178c:	f001 ff32 	bl	80035f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001790:	2300      	movs	r3, #0
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001794:	e056      	b.n	8001844 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001798:	015a      	lsls	r2, r3, #5
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	4413      	add	r3, r2
 800179e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017a2:	461a      	mov	r2, r3
 80017a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017a8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ac:	015a      	lsls	r2, r3, #5
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	4413      	add	r3, r2
 80017b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017ba:	0151      	lsls	r1, r2, #5
 80017bc:	69fa      	ldr	r2, [r7, #28]
 80017be:	440a      	add	r2, r1
 80017c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017c8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80017ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017cc:	015a      	lsls	r2, r3, #5
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	4413      	add	r3, r2
 80017d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017da:	0151      	lsls	r1, r2, #5
 80017dc:	69fa      	ldr	r2, [r7, #28]
 80017de:	440a      	add	r2, r1
 80017e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ec:	015a      	lsls	r2, r3, #5
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	4413      	add	r3, r2
 80017f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017f6:	461a      	mov	r2, r3
 80017f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017fc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001800:	015a      	lsls	r2, r3, #5
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	4413      	add	r3, r2
 8001806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800180e:	0151      	lsls	r1, r2, #5
 8001810:	69fa      	ldr	r2, [r7, #28]
 8001812:	440a      	add	r2, r1
 8001814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001818:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800181c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800181e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001820:	015a      	lsls	r2, r3, #5
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	4413      	add	r3, r2
 8001826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800182e:	0151      	lsls	r1, r2, #5
 8001830:	69fa      	ldr	r2, [r7, #28]
 8001832:	440a      	add	r2, r1
 8001834:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001838:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800183c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800183e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001840:	3301      	adds	r3, #1
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800184a:	429a      	cmp	r2, r3
 800184c:	d3a3      	bcc.n	8001796 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800185c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001860:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	2b00      	cmp	r3, #0
 8001868:	d016      	beq.n	8001898 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001874:	69fa      	ldr	r2, [r7, #28]
 8001876:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800187a:	f043 030b 	orr.w	r3, r3, #11
 800187e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	69fa      	ldr	r2, [r7, #28]
 800188c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001890:	f043 030b 	orr.w	r3, r3, #11
 8001894:	6453      	str	r3, [r2, #68]	; 0x44
 8001896:	e015      	b.n	80018c4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	69fa      	ldr	r2, [r7, #28]
 80018a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018aa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80018ae:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	69fa      	ldr	r2, [r7, #28]
 80018ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018be:	f043 030b 	orr.w	r3, r3, #11
 80018c2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	69fa      	ldr	r2, [r7, #28]
 80018ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018d2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80018d6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6818      	ldr	r0, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018e8:	461a      	mov	r2, r3
 80018ea:	f002 fe97 	bl	800461c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	695a      	ldr	r2, [r3, #20]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80018fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f002 fdc5 	bl	8004492 <USB_ReadInterrupts>
 8001908:	4603      	mov	r3, r0
 800190a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800190e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001912:	d124      	bne.n	800195e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f002 fe5b 	bl	80045d4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f001 fec3 	bl	80036ae <USB_GetDevSpeed>
 8001928:	4603      	mov	r3, r0
 800192a:	461a      	mov	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681c      	ldr	r4, [r3, #0]
 8001934:	f001 f93e 	bl	8002bb4 <HAL_RCC_GetHCLKFreq>
 8001938:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800193e:	b2db      	uxtb	r3, r3
 8001940:	461a      	mov	r2, r3
 8001942:	4620      	mov	r0, r4
 8001944:	f001 fbe2 	bl	800310c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f004 fcc0 	bl	80062ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	695a      	ldr	r2, [r3, #20]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800195c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f002 fd95 	bl	8004492 <USB_ReadInterrupts>
 8001968:	4603      	mov	r3, r0
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b08      	cmp	r3, #8
 8001970:	d10a      	bne.n	8001988 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f004 fc9d 	bl	80062b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	695a      	ldr	r2, [r3, #20]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f002 0208 	and.w	r2, r2, #8
 8001986:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f002 fd80 	bl	8004492 <USB_ReadInterrupts>
 8001992:	4603      	mov	r3, r0
 8001994:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001998:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800199c:	d10f      	bne.n	80019be <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800199e:	2300      	movs	r3, #0
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	4619      	mov	r1, r3
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f004 fcff 	bl	80063ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	695a      	ldr	r2, [r3, #20]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80019bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f002 fd65 	bl	8004492 <USB_ReadInterrupts>
 80019c8:	4603      	mov	r3, r0
 80019ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019d2:	d10f      	bne.n	80019f4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	4619      	mov	r1, r3
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f004 fcd2 	bl	8006388 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	695a      	ldr	r2, [r3, #20]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80019f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f002 fd4a 	bl	8004492 <USB_ReadInterrupts>
 80019fe:	4603      	mov	r3, r0
 8001a00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a08:	d10a      	bne.n	8001a20 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f004 fce0 	bl	80063d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	695a      	ldr	r2, [r3, #20]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f002 fd34 	bl	8004492 <USB_ReadInterrupts>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d115      	bne.n	8001a60 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	f003 0304 	and.w	r3, r3, #4
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d002      	beq.n	8001a4c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f004 fcd0 	bl	80063ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6859      	ldr	r1, [r3, #4]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	e000      	b.n	8001a60 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001a5e:	bf00      	nop
    }
  }
}
 8001a60:	3734      	adds	r7, #52	; 0x34
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd90      	pop	{r4, r7, pc}

08001a66 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d101      	bne.n	8001a80 <HAL_PCD_SetAddress+0x1a>
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	e013      	b.n	8001aa8 <HAL_PCD_SetAddress+0x42>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	78fa      	ldrb	r2, [r7, #3]
 8001a8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	78fa      	ldrb	r2, [r7, #3]
 8001a96:	4611      	mov	r1, r2
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f002 fc92 	bl	80043c2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	4608      	mov	r0, r1
 8001aba:	4611      	mov	r1, r2
 8001abc:	461a      	mov	r2, r3
 8001abe:	4603      	mov	r3, r0
 8001ac0:	70fb      	strb	r3, [r7, #3]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	803b      	strh	r3, [r7, #0]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ace:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	da0f      	bge.n	8001af6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ad6:	78fb      	ldrb	r3, [r7, #3]
 8001ad8:	f003 020f 	and.w	r2, r3, #15
 8001adc:	4613      	mov	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	1a9b      	subs	r3, r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	3338      	adds	r3, #56	; 0x38
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	3304      	adds	r3, #4
 8001aec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2201      	movs	r2, #1
 8001af2:	705a      	strb	r2, [r3, #1]
 8001af4:	e00f      	b.n	8001b16 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	f003 020f 	and.w	r2, r3, #15
 8001afc:	4613      	mov	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	1a9b      	subs	r3, r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b16:	78fb      	ldrb	r3, [r7, #3]
 8001b18:	f003 030f 	and.w	r3, r3, #15
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b22:	883a      	ldrh	r2, [r7, #0]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	78ba      	ldrb	r2, [r7, #2]
 8001b2c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	785b      	ldrb	r3, [r3, #1]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d004      	beq.n	8001b40 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b40:	78bb      	ldrb	r3, [r7, #2]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d102      	bne.n	8001b4c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d101      	bne.n	8001b5a <HAL_PCD_EP_Open+0xaa>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e00e      	b.n	8001b78 <HAL_PCD_EP_Open+0xc8>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68f9      	ldr	r1, [r7, #12]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f001 fdc5 	bl	80036f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001b76:	7afb      	ldrb	r3, [r7, #11]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	da0f      	bge.n	8001bb4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	f003 020f 	and.w	r2, r3, #15
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	1a9b      	subs	r3, r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	3338      	adds	r3, #56	; 0x38
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3304      	adds	r3, #4
 8001baa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	705a      	strb	r2, [r3, #1]
 8001bb2:	e00f      	b.n	8001bd4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bb4:	78fb      	ldrb	r3, [r7, #3]
 8001bb6:	f003 020f 	and.w	r2, r3, #15
 8001bba:	4613      	mov	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	1a9b      	subs	r3, r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	3304      	adds	r3, #4
 8001bcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d101      	bne.n	8001bee <HAL_PCD_EP_Close+0x6e>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e00e      	b.n	8001c0c <HAL_PCD_EP_Close+0x8c>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68f9      	ldr	r1, [r7, #12]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f001 fe03 	bl	8003808 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	607a      	str	r2, [r7, #4]
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	460b      	mov	r3, r1
 8001c22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c24:	7afb      	ldrb	r3, [r7, #11]
 8001c26:	f003 020f 	and.w	r2, r3, #15
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	1a9b      	subs	r3, r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	4413      	add	r3, r2
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	2200      	movs	r2, #0
 8001c54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c56:	7afb      	ldrb	r3, [r7, #11]
 8001c58:	f003 030f 	and.w	r3, r3, #15
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d102      	bne.n	8001c70 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c70:	7afb      	ldrb	r3, [r7, #11]
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d109      	bne.n	8001c8e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	461a      	mov	r2, r3
 8001c86:	6979      	ldr	r1, [r7, #20]
 8001c88:	f002 f8de 	bl	8003e48 <USB_EP0StartXfer>
 8001c8c:	e008      	b.n	8001ca0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6818      	ldr	r0, [r3, #0]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	461a      	mov	r2, r3
 8001c9a:	6979      	ldr	r1, [r7, #20]
 8001c9c:	f001 fe90 	bl	80039c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	60f8      	str	r0, [r7, #12]
 8001cb2:	607a      	str	r2, [r7, #4]
 8001cb4:	603b      	str	r3, [r7, #0]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cba:	7afb      	ldrb	r3, [r7, #11]
 8001cbc:	f003 020f 	and.w	r2, r3, #15
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	1a9b      	subs	r3, r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	3338      	adds	r3, #56	; 0x38
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	4413      	add	r3, r2
 8001cce:	3304      	adds	r3, #4
 8001cd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cea:	7afb      	ldrb	r3, [r7, #11]
 8001cec:	f003 030f 	and.w	r3, r3, #15
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d102      	bne.n	8001d04 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d04:	7afb      	ldrb	r3, [r7, #11]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d109      	bne.n	8001d22 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6818      	ldr	r0, [r3, #0]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	461a      	mov	r2, r3
 8001d1a:	6979      	ldr	r1, [r7, #20]
 8001d1c:	f002 f894 	bl	8003e48 <USB_EP0StartXfer>
 8001d20:	e008      	b.n	8001d34 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6818      	ldr	r0, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	6979      	ldr	r1, [r7, #20]
 8001d30:	f001 fe46 	bl	80039c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b084      	sub	sp, #16
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	460b      	mov	r3, r1
 8001d48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	f003 020f 	and.w	r2, r3, #15
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d901      	bls.n	8001d5c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e050      	b.n	8001dfe <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	da0f      	bge.n	8001d84 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	f003 020f 	and.w	r2, r3, #15
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	1a9b      	subs	r3, r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	3338      	adds	r3, #56	; 0x38
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	4413      	add	r3, r2
 8001d78:	3304      	adds	r3, #4
 8001d7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	705a      	strb	r2, [r3, #1]
 8001d82:	e00d      	b.n	8001da0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d84:	78fa      	ldrb	r2, [r7, #3]
 8001d86:	4613      	mov	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	1a9b      	subs	r3, r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	3304      	adds	r3, #4
 8001d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2201      	movs	r2, #1
 8001da4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001da6:	78fb      	ldrb	r3, [r7, #3]
 8001da8:	f003 030f 	and.w	r3, r3, #15
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <HAL_PCD_EP_SetStall+0x82>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e01e      	b.n	8001dfe <HAL_PCD_EP_SetStall+0xc0>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68f9      	ldr	r1, [r7, #12]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f002 fa23 	bl	800421a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dd4:	78fb      	ldrb	r3, [r7, #3]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10a      	bne.n	8001df4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6818      	ldr	r0, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	b2d9      	uxtb	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001dee:	461a      	mov	r2, r3
 8001df0:	f002 fc14 	bl	800461c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b084      	sub	sp, #16
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e12:	78fb      	ldrb	r3, [r7, #3]
 8001e14:	f003 020f 	and.w	r2, r3, #15
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d901      	bls.n	8001e24 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e042      	b.n	8001eaa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	da0f      	bge.n	8001e4c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	f003 020f 	and.w	r2, r3, #15
 8001e32:	4613      	mov	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	1a9b      	subs	r3, r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	3338      	adds	r3, #56	; 0x38
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	4413      	add	r3, r2
 8001e40:	3304      	adds	r3, #4
 8001e42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2201      	movs	r2, #1
 8001e48:	705a      	strb	r2, [r3, #1]
 8001e4a:	e00f      	b.n	8001e6c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	f003 020f 	and.w	r2, r3, #15
 8001e52:	4613      	mov	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	1a9b      	subs	r3, r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	3304      	adds	r3, #4
 8001e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e72:	78fb      	ldrb	r3, [r7, #3]
 8001e74:	f003 030f 	and.w	r3, r3, #15
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_PCD_EP_ClrStall+0x86>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e00e      	b.n	8001eaa <HAL_PCD_EP_ClrStall+0xa4>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68f9      	ldr	r1, [r7, #12]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f002 fa2b 	bl	80042f6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b08a      	sub	sp, #40	; 0x28
 8001eb6:	af02      	add	r7, sp, #8
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	1a9b      	subs	r3, r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	3338      	adds	r3, #56	; 0x38
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	699a      	ldr	r2, [r3, #24]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d901      	bls.n	8001eea <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e06c      	b.n	8001fc4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	695a      	ldr	r2, [r3, #20]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	69fa      	ldr	r2, [r7, #28]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d902      	bls.n	8001f06 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3303      	adds	r3, #3
 8001f0a:	089b      	lsrs	r3, r3, #2
 8001f0c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f0e:	e02b      	b.n	8001f68 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	695a      	ldr	r2, [r3, #20]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	69fa      	ldr	r2, [r7, #28]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d902      	bls.n	8001f2c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	3303      	adds	r3, #3
 8001f30:	089b      	lsrs	r3, r3, #2
 8001f32:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	68d9      	ldr	r1, [r3, #12]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	4603      	mov	r3, r0
 8001f4a:	6978      	ldr	r0, [r7, #20]
 8001f4c:	f002 f8cf 	bl	80040ee <USB_WritePacket>

    ep->xfer_buff  += len;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	441a      	add	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	699a      	ldr	r2, [r3, #24]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	441a      	add	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	015a      	lsls	r2, r3, #5
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d809      	bhi.n	8001f92 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	699a      	ldr	r2, [r3, #24]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d203      	bcs.n	8001f92 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1be      	bne.n	8001f10 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	695a      	ldr	r2, [r3, #20]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d811      	bhi.n	8001fc2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	6939      	ldr	r1, [r7, #16]
 8001fba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3720      	adds	r7, #32
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	333c      	adds	r3, #60	; 0x3c
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	015a      	lsls	r2, r3, #5
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	f040 80a0 	bne.w	8002144 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d015      	beq.n	800203a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4a72      	ldr	r2, [pc, #456]	; (80021dc <PCD_EP_OutXfrComplete_int+0x210>)
 8002012:	4293      	cmp	r3, r2
 8002014:	f240 80dd 	bls.w	80021d2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 80d7 	beq.w	80021d2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	015a      	lsls	r2, r3, #5
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	4413      	add	r3, r2
 800202c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002030:	461a      	mov	r2, r3
 8002032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002036:	6093      	str	r3, [r2, #8]
 8002038:	e0cb      	b.n	80021d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	f003 0320 	and.w	r3, r3, #32
 8002040:	2b00      	cmp	r3, #0
 8002042:	d009      	beq.n	8002058 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	015a      	lsls	r2, r3, #5
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4413      	add	r3, r2
 800204c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002050:	461a      	mov	r2, r3
 8002052:	2320      	movs	r3, #32
 8002054:	6093      	str	r3, [r2, #8]
 8002056:	e0bc      	b.n	80021d2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800205e:	2b00      	cmp	r3, #0
 8002060:	f040 80b7 	bne.w	80021d2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4a5d      	ldr	r2, [pc, #372]	; (80021dc <PCD_EP_OutXfrComplete_int+0x210>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d90f      	bls.n	800208c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00a      	beq.n	800208c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	015a      	lsls	r2, r3, #5
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4413      	add	r3, r2
 800207e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002082:	461a      	mov	r2, r3
 8002084:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002088:	6093      	str	r3, [r2, #8]
 800208a:	e0a2      	b.n	80021d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	4613      	mov	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	1a9b      	subs	r3, r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800209e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	0159      	lsls	r1, r3, #5
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	440b      	add	r3, r1
 80020a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80020b2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	4613      	mov	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	1a9b      	subs	r3, r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4403      	add	r3, r0
 80020c2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80020c6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	4613      	mov	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	1a9b      	subs	r3, r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020da:	6819      	ldr	r1, [r3, #0]
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	4613      	mov	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	1a9b      	subs	r3, r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4403      	add	r3, r0
 80020ea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4419      	add	r1, r3
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	1a9b      	subs	r3, r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4403      	add	r3, r0
 8002100:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002104:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d114      	bne.n	8002136 <PCD_EP_OutXfrComplete_int+0x16a>
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	4613      	mov	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	1a9b      	subs	r3, r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d108      	bne.n	8002136 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6818      	ldr	r0, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800212e:	461a      	mov	r2, r3
 8002130:	2101      	movs	r1, #1
 8002132:	f002 fa73 	bl	800461c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	4619      	mov	r1, r3
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f004 f883 	bl	8006248 <HAL_PCD_DataOutStageCallback>
 8002142:	e046      	b.n	80021d2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4a26      	ldr	r2, [pc, #152]	; (80021e0 <PCD_EP_OutXfrComplete_int+0x214>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d124      	bne.n	8002196 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00a      	beq.n	800216c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	015a      	lsls	r2, r3, #5
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4413      	add	r3, r2
 800215e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002162:	461a      	mov	r2, r3
 8002164:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002168:	6093      	str	r3, [r2, #8]
 800216a:	e032      	b.n	80021d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	f003 0320 	and.w	r3, r3, #32
 8002172:	2b00      	cmp	r3, #0
 8002174:	d008      	beq.n	8002188 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	015a      	lsls	r2, r3, #5
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4413      	add	r3, r2
 800217e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002182:	461a      	mov	r2, r3
 8002184:	2320      	movs	r3, #32
 8002186:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	4619      	mov	r1, r3
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f004 f85a 	bl	8006248 <HAL_PCD_DataOutStageCallback>
 8002194:	e01d      	b.n	80021d2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d114      	bne.n	80021c6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	4613      	mov	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	1a9b      	subs	r3, r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d108      	bne.n	80021c6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021be:	461a      	mov	r2, r3
 80021c0:	2100      	movs	r1, #0
 80021c2:	f002 fa2b 	bl	800461c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	4619      	mov	r1, r3
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f004 f83b 	bl	8006248 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	4f54300a 	.word	0x4f54300a
 80021e0:	4f54310a 	.word	0x4f54310a

080021e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	333c      	adds	r3, #60	; 0x3c
 80021fc:	3304      	adds	r3, #4
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	015a      	lsls	r2, r3, #5
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4413      	add	r3, r2
 800220a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4a15      	ldr	r2, [pc, #84]	; (800226c <PCD_EP_OutSetupPacket_int+0x88>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d90e      	bls.n	8002238 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002220:	2b00      	cmp	r3, #0
 8002222:	d009      	beq.n	8002238 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	015a      	lsls	r2, r3, #5
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4413      	add	r3, r2
 800222c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002230:	461a      	mov	r2, r3
 8002232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002236:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f003 fff3 	bl	8006224 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	4a0a      	ldr	r2, [pc, #40]	; (800226c <PCD_EP_OutSetupPacket_int+0x88>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d90c      	bls.n	8002260 <PCD_EP_OutSetupPacket_int+0x7c>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d108      	bne.n	8002260 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6818      	ldr	r0, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002258:	461a      	mov	r2, r3
 800225a:	2101      	movs	r1, #1
 800225c:	f002 f9de 	bl	800461c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	4f54300a 	.word	0x4f54300a

08002270 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	70fb      	strb	r3, [r7, #3]
 800227c:	4613      	mov	r3, r2
 800227e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d107      	bne.n	800229e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800228e:	883b      	ldrh	r3, [r7, #0]
 8002290:	0419      	lsls	r1, r3, #16
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	430a      	orrs	r2, r1
 800229a:	629a      	str	r2, [r3, #40]	; 0x28
 800229c:	e028      	b.n	80022f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a4:	0c1b      	lsrs	r3, r3, #16
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	4413      	add	r3, r2
 80022aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022ac:	2300      	movs	r3, #0
 80022ae:	73fb      	strb	r3, [r7, #15]
 80022b0:	e00d      	b.n	80022ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	3340      	adds	r3, #64	; 0x40
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	0c1b      	lsrs	r3, r3, #16
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	4413      	add	r3, r2
 80022c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
 80022ca:	3301      	adds	r3, #1
 80022cc:	73fb      	strb	r3, [r7, #15]
 80022ce:	7bfa      	ldrb	r2, [r7, #15]
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d3ec      	bcc.n	80022b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80022d8:	883b      	ldrh	r3, [r7, #0]
 80022da:	0418      	lsls	r0, r3, #16
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6819      	ldr	r1, [r3, #0]
 80022e0:	78fb      	ldrb	r3, [r7, #3]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	4302      	orrs	r2, r0
 80022e8:	3340      	adds	r3, #64	; 0x40
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	460b      	mov	r3, r1
 8002308:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	887a      	ldrh	r2, [r7, #2]
 8002310:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e264      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d075      	beq.n	8002442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002356:	4ba3      	ldr	r3, [pc, #652]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b04      	cmp	r3, #4
 8002360:	d00c      	beq.n	800237c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002362:	4ba0      	ldr	r3, [pc, #640]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800236a:	2b08      	cmp	r3, #8
 800236c:	d112      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800236e:	4b9d      	ldr	r3, [pc, #628]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800237a:	d10b      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	4b99      	ldr	r3, [pc, #612]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d05b      	beq.n	8002440 <HAL_RCC_OscConfig+0x108>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d157      	bne.n	8002440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e23f      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239c:	d106      	bne.n	80023ac <HAL_RCC_OscConfig+0x74>
 800239e:	4b91      	ldr	r3, [pc, #580]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a90      	ldr	r2, [pc, #576]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e01d      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x98>
 80023b6:	4b8b      	ldr	r3, [pc, #556]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a8a      	ldr	r2, [pc, #552]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b88      	ldr	r3, [pc, #544]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a87      	ldr	r2, [pc, #540]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e00b      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023d0:	4b84      	ldr	r3, [pc, #528]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a83      	ldr	r2, [pc, #524]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b81      	ldr	r3, [pc, #516]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a80      	ldr	r2, [pc, #512]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7fe fb40 	bl	8000a74 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f8:	f7fe fb3c 	bl	8000a74 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e204      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	4b76      	ldr	r3, [pc, #472]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0xc0>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7fe fb2c 	bl	8000a74 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002420:	f7fe fb28 	bl	8000a74 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e1f0      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002432:	4b6c      	ldr	r3, [pc, #432]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0xe8>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d063      	beq.n	8002516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800244e:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245a:	4b62      	ldr	r3, [pc, #392]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002462:	2b08      	cmp	r3, #8
 8002464:	d11c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002466:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d116      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002472:	4b5c      	ldr	r3, [pc, #368]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d001      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e1c4      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	4b56      	ldr	r3, [pc, #344]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4952      	ldr	r1, [pc, #328]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	e03a      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d020      	beq.n	80024ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a8:	4b4f      	ldr	r3, [pc, #316]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe fae1 	bl	8000a74 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b6:	f7fe fadd 	bl	8000a74 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e1a5      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c8:	4b46      	ldr	r3, [pc, #280]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4940      	ldr	r1, [pc, #256]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]
 80024e8:	e015      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ea:	4b3f      	ldr	r3, [pc, #252]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe fac0 	bl	8000a74 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f8:	f7fe fabc 	bl	8000a74 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e184      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250a:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d030      	beq.n	8002584 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d016      	beq.n	8002558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252a:	4b30      	ldr	r3, [pc, #192]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800252c:	2201      	movs	r2, #1
 800252e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7fe faa0 	bl	8000a74 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002538:	f7fe fa9c 	bl	8000a74 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e164      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254a:	4b26      	ldr	r3, [pc, #152]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x200>
 8002556:	e015      	b.n	8002584 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002558:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7fe fa89 	bl	8000a74 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002566:	f7fe fa85 	bl	8000a74 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e14d      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002578:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800257a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80a0 	beq.w	80026d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10f      	bne.n	80025c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
 80025b2:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025be:	2301      	movs	r3, #1
 80025c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d121      	bne.n	8002612 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025da:	f7fe fa4b 	bl	8000a74 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	e011      	b.n	8002606 <HAL_RCC_OscConfig+0x2ce>
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800
 80025e8:	42470000 	.word	0x42470000
 80025ec:	42470e80 	.word	0x42470e80
 80025f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f4:	f7fe fa3e 	bl	8000a74 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e106      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002606:	4b85      	ldr	r3, [pc, #532]	; (800281c <HAL_RCC_OscConfig+0x4e4>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d106      	bne.n	8002628 <HAL_RCC_OscConfig+0x2f0>
 800261a:	4b81      	ldr	r3, [pc, #516]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261e:	4a80      	ldr	r2, [pc, #512]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6713      	str	r3, [r2, #112]	; 0x70
 8002626:	e01c      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b05      	cmp	r3, #5
 800262e:	d10c      	bne.n	800264a <HAL_RCC_OscConfig+0x312>
 8002630:	4b7b      	ldr	r3, [pc, #492]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	4a7a      	ldr	r2, [pc, #488]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	6713      	str	r3, [r2, #112]	; 0x70
 800263c:	4b78      	ldr	r3, [pc, #480]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	4a77      	ldr	r2, [pc, #476]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6713      	str	r3, [r2, #112]	; 0x70
 8002648:	e00b      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 800264a:	4b75      	ldr	r3, [pc, #468]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	4a74      	ldr	r2, [pc, #464]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	6713      	str	r3, [r2, #112]	; 0x70
 8002656:	4b72      	ldr	r3, [pc, #456]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	4a71      	ldr	r2, [pc, #452]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 800265c:	f023 0304 	bic.w	r3, r3, #4
 8002660:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d015      	beq.n	8002696 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266a:	f7fe fa03 	bl	8000a74 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe f9ff 	bl	8000a74 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e0c5      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002688:	4b65      	ldr	r3, [pc, #404]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0ee      	beq.n	8002672 <HAL_RCC_OscConfig+0x33a>
 8002694:	e014      	b.n	80026c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7fe f9ed 	bl	8000a74 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269c:	e00a      	b.n	80026b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7fe f9e9 	bl	8000a74 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e0af      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b4:	4b5a      	ldr	r3, [pc, #360]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ee      	bne.n	800269e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d105      	bne.n	80026d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c6:	4b56      	ldr	r3, [pc, #344]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	4a55      	ldr	r2, [pc, #340]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 80026cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 809b 	beq.w	8002812 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026dc:	4b50      	ldr	r3, [pc, #320]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 030c 	and.w	r3, r3, #12
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d05c      	beq.n	80027a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d141      	bne.n	8002774 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f0:	4b4c      	ldr	r3, [pc, #304]	; (8002824 <HAL_RCC_OscConfig+0x4ec>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f6:	f7fe f9bd 	bl	8000a74 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fe:	f7fe f9b9 	bl	8000a74 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e081      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002710:	4b43      	ldr	r3, [pc, #268]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1f0      	bne.n	80026fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69da      	ldr	r2, [r3, #28]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	019b      	lsls	r3, r3, #6
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002732:	085b      	lsrs	r3, r3, #1
 8002734:	3b01      	subs	r3, #1
 8002736:	041b      	lsls	r3, r3, #16
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273e:	061b      	lsls	r3, r3, #24
 8002740:	4937      	ldr	r1, [pc, #220]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002742:	4313      	orrs	r3, r2
 8002744:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002746:	4b37      	ldr	r3, [pc, #220]	; (8002824 <HAL_RCC_OscConfig+0x4ec>)
 8002748:	2201      	movs	r2, #1
 800274a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274c:	f7fe f992 	bl	8000a74 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002754:	f7fe f98e 	bl	8000a74 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e056      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002766:	4b2e      	ldr	r3, [pc, #184]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0f0      	beq.n	8002754 <HAL_RCC_OscConfig+0x41c>
 8002772:	e04e      	b.n	8002812 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002774:	4b2b      	ldr	r3, [pc, #172]	; (8002824 <HAL_RCC_OscConfig+0x4ec>)
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277a:	f7fe f97b 	bl	8000a74 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002782:	f7fe f977 	bl	8000a74 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e03f      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002794:	4b22      	ldr	r3, [pc, #136]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1f0      	bne.n	8002782 <HAL_RCC_OscConfig+0x44a>
 80027a0:	e037      	b.n	8002812 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e032      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027ae:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d028      	beq.n	800280e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d121      	bne.n	800280e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d11a      	bne.n	800280e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027de:	4013      	ands	r3, r2
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027e4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d111      	bne.n	800280e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f4:	085b      	lsrs	r3, r3, #1
 80027f6:	3b01      	subs	r3, #1
 80027f8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d107      	bne.n	800280e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800280a:	429a      	cmp	r2, r3
 800280c:	d001      	beq.n	8002812 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40007000 	.word	0x40007000
 8002820:	40023800 	.word	0x40023800
 8002824:	42470060 	.word	0x42470060

08002828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0cc      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800283c:	4b68      	ldr	r3, [pc, #416]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d90c      	bls.n	8002864 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284a:	4b65      	ldr	r3, [pc, #404]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	4b63      	ldr	r3, [pc, #396]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0b8      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d020      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800287c:	4b59      	ldr	r3, [pc, #356]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	4a58      	ldr	r2, [pc, #352]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002886:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002894:	4b53      	ldr	r3, [pc, #332]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4a52      	ldr	r2, [pc, #328]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800289e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a0:	4b50      	ldr	r3, [pc, #320]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	494d      	ldr	r1, [pc, #308]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d044      	beq.n	8002948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d107      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c6:	4b47      	ldr	r3, [pc, #284]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d119      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e07f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d003      	beq.n	80028e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d107      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e6:	4b3f      	ldr	r3, [pc, #252]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d109      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e06f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f6:	4b3b      	ldr	r3, [pc, #236]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e067      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002906:	4b37      	ldr	r3, [pc, #220]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f023 0203 	bic.w	r2, r3, #3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4934      	ldr	r1, [pc, #208]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	4313      	orrs	r3, r2
 8002916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002918:	f7fe f8ac 	bl	8000a74 <HAL_GetTick>
 800291c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291e:	e00a      	b.n	8002936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002920:	f7fe f8a8 	bl	8000a74 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	f241 3288 	movw	r2, #5000	; 0x1388
 800292e:	4293      	cmp	r3, r2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e04f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002936:	4b2b      	ldr	r3, [pc, #172]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 020c 	and.w	r2, r3, #12
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	429a      	cmp	r2, r3
 8002946:	d1eb      	bne.n	8002920 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002948:	4b25      	ldr	r3, [pc, #148]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d20c      	bcs.n	8002970 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002956:	4b22      	ldr	r3, [pc, #136]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800295e:	4b20      	ldr	r3, [pc, #128]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e032      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d008      	beq.n	800298e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800297c:	4b19      	ldr	r3, [pc, #100]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	4916      	ldr	r1, [pc, #88]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	4313      	orrs	r3, r2
 800298c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800299a:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	490e      	ldr	r1, [pc, #56]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ae:	f000 f821 	bl	80029f4 <HAL_RCC_GetSysClockFreq>
 80029b2:	4602      	mov	r2, r0
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	091b      	lsrs	r3, r3, #4
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	490a      	ldr	r1, [pc, #40]	; (80029e8 <HAL_RCC_ClockConfig+0x1c0>)
 80029c0:	5ccb      	ldrb	r3, [r1, r3]
 80029c2:	fa22 f303 	lsr.w	r3, r2, r3
 80029c6:	4a09      	ldr	r2, [pc, #36]	; (80029ec <HAL_RCC_ClockConfig+0x1c4>)
 80029c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029ca:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <HAL_RCC_ClockConfig+0x1c8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fe f80c 	bl	80009ec <HAL_InitTick>

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40023c00 	.word	0x40023c00
 80029e4:	40023800 	.word	0x40023800
 80029e8:	08006830 	.word	0x08006830
 80029ec:	20000000 	.word	0x20000000
 80029f0:	20000004 	.word	0x20000004

080029f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	607b      	str	r3, [r7, #4]
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	2300      	movs	r3, #0
 8002a06:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a0c:	4b67      	ldr	r3, [pc, #412]	; (8002bac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 030c 	and.w	r3, r3, #12
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d00d      	beq.n	8002a34 <HAL_RCC_GetSysClockFreq+0x40>
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	f200 80bd 	bhi.w	8002b98 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <HAL_RCC_GetSysClockFreq+0x34>
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d003      	beq.n	8002a2e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a26:	e0b7      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a28:	4b61      	ldr	r3, [pc, #388]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a2a:	60bb      	str	r3, [r7, #8]
       break;
 8002a2c:	e0b7      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a2e:	4b60      	ldr	r3, [pc, #384]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a30:	60bb      	str	r3, [r7, #8]
      break;
 8002a32:	e0b4      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a34:	4b5d      	ldr	r3, [pc, #372]	; (8002bac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a3c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a3e:	4b5b      	ldr	r3, [pc, #364]	; (8002bac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d04d      	beq.n	8002ae6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a4a:	4b58      	ldr	r3, [pc, #352]	; (8002bac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	099b      	lsrs	r3, r3, #6
 8002a50:	461a      	mov	r2, r3
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a5a:	f04f 0100 	mov.w	r1, #0
 8002a5e:	ea02 0800 	and.w	r8, r2, r0
 8002a62:	ea03 0901 	and.w	r9, r3, r1
 8002a66:	4640      	mov	r0, r8
 8002a68:	4649      	mov	r1, r9
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	014b      	lsls	r3, r1, #5
 8002a74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a78:	0142      	lsls	r2, r0, #5
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	ebb0 0008 	subs.w	r0, r0, r8
 8002a82:	eb61 0109 	sbc.w	r1, r1, r9
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	018b      	lsls	r3, r1, #6
 8002a90:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a94:	0182      	lsls	r2, r0, #6
 8002a96:	1a12      	subs	r2, r2, r0
 8002a98:	eb63 0301 	sbc.w	r3, r3, r1
 8002a9c:	f04f 0000 	mov.w	r0, #0
 8002aa0:	f04f 0100 	mov.w	r1, #0
 8002aa4:	00d9      	lsls	r1, r3, #3
 8002aa6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002aaa:	00d0      	lsls	r0, r2, #3
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	eb12 0208 	adds.w	r2, r2, r8
 8002ab4:	eb43 0309 	adc.w	r3, r3, r9
 8002ab8:	f04f 0000 	mov.w	r0, #0
 8002abc:	f04f 0100 	mov.w	r1, #0
 8002ac0:	0299      	lsls	r1, r3, #10
 8002ac2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002ac6:	0290      	lsls	r0, r2, #10
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4610      	mov	r0, r2
 8002ace:	4619      	mov	r1, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	f7fd fb76 	bl	80001c8 <__aeabi_uldivmod>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	e04a      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae6:	4b31      	ldr	r3, [pc, #196]	; (8002bac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	099b      	lsrs	r3, r3, #6
 8002aec:	461a      	mov	r2, r3
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002af6:	f04f 0100 	mov.w	r1, #0
 8002afa:	ea02 0400 	and.w	r4, r2, r0
 8002afe:	ea03 0501 	and.w	r5, r3, r1
 8002b02:	4620      	mov	r0, r4
 8002b04:	4629      	mov	r1, r5
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	f04f 0300 	mov.w	r3, #0
 8002b0e:	014b      	lsls	r3, r1, #5
 8002b10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b14:	0142      	lsls	r2, r0, #5
 8002b16:	4610      	mov	r0, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	1b00      	subs	r0, r0, r4
 8002b1c:	eb61 0105 	sbc.w	r1, r1, r5
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	018b      	lsls	r3, r1, #6
 8002b2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b2e:	0182      	lsls	r2, r0, #6
 8002b30:	1a12      	subs	r2, r2, r0
 8002b32:	eb63 0301 	sbc.w	r3, r3, r1
 8002b36:	f04f 0000 	mov.w	r0, #0
 8002b3a:	f04f 0100 	mov.w	r1, #0
 8002b3e:	00d9      	lsls	r1, r3, #3
 8002b40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b44:	00d0      	lsls	r0, r2, #3
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	1912      	adds	r2, r2, r4
 8002b4c:	eb45 0303 	adc.w	r3, r5, r3
 8002b50:	f04f 0000 	mov.w	r0, #0
 8002b54:	f04f 0100 	mov.w	r1, #0
 8002b58:	0299      	lsls	r1, r3, #10
 8002b5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b5e:	0290      	lsls	r0, r2, #10
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4610      	mov	r0, r2
 8002b66:	4619      	mov	r1, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	f7fd fb2a 	bl	80001c8 <__aeabi_uldivmod>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4613      	mov	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	0c1b      	lsrs	r3, r3, #16
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	3301      	adds	r3, #1
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b94:	60bb      	str	r3, [r7, #8]
      break;
 8002b96:	e002      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b98:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b9a:	60bb      	str	r3, [r7, #8]
      break;
 8002b9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b9e:	68bb      	ldr	r3, [r7, #8]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	00f42400 	.word	0x00f42400

08002bb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb8:	4b03      	ldr	r3, [pc, #12]	; (8002bc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bba:	681b      	ldr	r3, [r3, #0]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	20000000 	.word	0x20000000

08002bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bd0:	f7ff fff0 	bl	8002bb4 <HAL_RCC_GetHCLKFreq>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	4b05      	ldr	r3, [pc, #20]	; (8002bec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	0a9b      	lsrs	r3, r3, #10
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	4903      	ldr	r1, [pc, #12]	; (8002bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002be2:	5ccb      	ldrb	r3, [r1, r3]
 8002be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	08006840 	.word	0x08006840

08002bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bf8:	f7ff ffdc 	bl	8002bb4 <HAL_RCC_GetHCLKFreq>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	0b5b      	lsrs	r3, r3, #13
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	4903      	ldr	r1, [pc, #12]	; (8002c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c0a:	5ccb      	ldrb	r3, [r1, r3]
 8002c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40023800 	.word	0x40023800
 8002c18:	08006840 	.word	0x08006840

08002c1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e03f      	b.n	8002cae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7fd fdd8 	bl	80007f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2224      	movs	r2, #36	; 0x24
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f829 	bl	8002cb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695a      	ldr	r2, [r3, #20]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cbc:	b09f      	sub	sp, #124	; 0x7c
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cce:	68d9      	ldr	r1, [r3, #12]
 8002cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	ea40 0301 	orr.w	r3, r0, r1
 8002cd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002cfc:	f021 010c 	bic.w	r1, r1, #12
 8002d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d06:	430b      	orrs	r3, r1
 8002d08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d16:	6999      	ldr	r1, [r3, #24]
 8002d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	ea40 0301 	orr.w	r3, r0, r1
 8002d20:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	4bc5      	ldr	r3, [pc, #788]	; (800303c <UART_SetConfig+0x384>)
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d004      	beq.n	8002d36 <UART_SetConfig+0x7e>
 8002d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	4bc3      	ldr	r3, [pc, #780]	; (8003040 <UART_SetConfig+0x388>)
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d103      	bne.n	8002d3e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d36:	f7ff ff5d 	bl	8002bf4 <HAL_RCC_GetPCLK2Freq>
 8002d3a:	6778      	str	r0, [r7, #116]	; 0x74
 8002d3c:	e002      	b.n	8002d44 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d3e:	f7ff ff45 	bl	8002bcc <HAL_RCC_GetPCLK1Freq>
 8002d42:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d4c:	f040 80b6 	bne.w	8002ebc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d52:	461c      	mov	r4, r3
 8002d54:	f04f 0500 	mov.w	r5, #0
 8002d58:	4622      	mov	r2, r4
 8002d5a:	462b      	mov	r3, r5
 8002d5c:	1891      	adds	r1, r2, r2
 8002d5e:	6439      	str	r1, [r7, #64]	; 0x40
 8002d60:	415b      	adcs	r3, r3
 8002d62:	647b      	str	r3, [r7, #68]	; 0x44
 8002d64:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d68:	1912      	adds	r2, r2, r4
 8002d6a:	eb45 0303 	adc.w	r3, r5, r3
 8002d6e:	f04f 0000 	mov.w	r0, #0
 8002d72:	f04f 0100 	mov.w	r1, #0
 8002d76:	00d9      	lsls	r1, r3, #3
 8002d78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d7c:	00d0      	lsls	r0, r2, #3
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	1911      	adds	r1, r2, r4
 8002d84:	6639      	str	r1, [r7, #96]	; 0x60
 8002d86:	416b      	adcs	r3, r5
 8002d88:	667b      	str	r3, [r7, #100]	; 0x64
 8002d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	1891      	adds	r1, r2, r2
 8002d96:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d98:	415b      	adcs	r3, r3
 8002d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002da0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002da4:	f7fd fa10 	bl	80001c8 <__aeabi_uldivmod>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4ba5      	ldr	r3, [pc, #660]	; (8003044 <UART_SetConfig+0x38c>)
 8002dae:	fba3 2302 	umull	r2, r3, r3, r2
 8002db2:	095b      	lsrs	r3, r3, #5
 8002db4:	011e      	lsls	r6, r3, #4
 8002db6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002db8:	461c      	mov	r4, r3
 8002dba:	f04f 0500 	mov.w	r5, #0
 8002dbe:	4622      	mov	r2, r4
 8002dc0:	462b      	mov	r3, r5
 8002dc2:	1891      	adds	r1, r2, r2
 8002dc4:	6339      	str	r1, [r7, #48]	; 0x30
 8002dc6:	415b      	adcs	r3, r3
 8002dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8002dca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002dce:	1912      	adds	r2, r2, r4
 8002dd0:	eb45 0303 	adc.w	r3, r5, r3
 8002dd4:	f04f 0000 	mov.w	r0, #0
 8002dd8:	f04f 0100 	mov.w	r1, #0
 8002ddc:	00d9      	lsls	r1, r3, #3
 8002dde:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002de2:	00d0      	lsls	r0, r2, #3
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	1911      	adds	r1, r2, r4
 8002dea:	65b9      	str	r1, [r7, #88]	; 0x58
 8002dec:	416b      	adcs	r3, r5
 8002dee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	461a      	mov	r2, r3
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	1891      	adds	r1, r2, r2
 8002dfc:	62b9      	str	r1, [r7, #40]	; 0x28
 8002dfe:	415b      	adcs	r3, r3
 8002e00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e06:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002e0a:	f7fd f9dd 	bl	80001c8 <__aeabi_uldivmod>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4b8c      	ldr	r3, [pc, #560]	; (8003044 <UART_SetConfig+0x38c>)
 8002e14:	fba3 1302 	umull	r1, r3, r3, r2
 8002e18:	095b      	lsrs	r3, r3, #5
 8002e1a:	2164      	movs	r1, #100	; 0x64
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	3332      	adds	r3, #50	; 0x32
 8002e26:	4a87      	ldr	r2, [pc, #540]	; (8003044 <UART_SetConfig+0x38c>)
 8002e28:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2c:	095b      	lsrs	r3, r3, #5
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e34:	441e      	add	r6, r3
 8002e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f04f 0100 	mov.w	r1, #0
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	1894      	adds	r4, r2, r2
 8002e44:	623c      	str	r4, [r7, #32]
 8002e46:	415b      	adcs	r3, r3
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
 8002e4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e4e:	1812      	adds	r2, r2, r0
 8002e50:	eb41 0303 	adc.w	r3, r1, r3
 8002e54:	f04f 0400 	mov.w	r4, #0
 8002e58:	f04f 0500 	mov.w	r5, #0
 8002e5c:	00dd      	lsls	r5, r3, #3
 8002e5e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e62:	00d4      	lsls	r4, r2, #3
 8002e64:	4622      	mov	r2, r4
 8002e66:	462b      	mov	r3, r5
 8002e68:	1814      	adds	r4, r2, r0
 8002e6a:	653c      	str	r4, [r7, #80]	; 0x50
 8002e6c:	414b      	adcs	r3, r1
 8002e6e:	657b      	str	r3, [r7, #84]	; 0x54
 8002e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	461a      	mov	r2, r3
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	1891      	adds	r1, r2, r2
 8002e7c:	61b9      	str	r1, [r7, #24]
 8002e7e:	415b      	adcs	r3, r3
 8002e80:	61fb      	str	r3, [r7, #28]
 8002e82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e86:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002e8a:	f7fd f99d 	bl	80001c8 <__aeabi_uldivmod>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	4b6c      	ldr	r3, [pc, #432]	; (8003044 <UART_SetConfig+0x38c>)
 8002e94:	fba3 1302 	umull	r1, r3, r3, r2
 8002e98:	095b      	lsrs	r3, r3, #5
 8002e9a:	2164      	movs	r1, #100	; 0x64
 8002e9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	3332      	adds	r3, #50	; 0x32
 8002ea6:	4a67      	ldr	r2, [pc, #412]	; (8003044 <UART_SetConfig+0x38c>)
 8002ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eac:	095b      	lsrs	r3, r3, #5
 8002eae:	f003 0207 	and.w	r2, r3, #7
 8002eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4432      	add	r2, r6
 8002eb8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002eba:	e0b9      	b.n	8003030 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ebc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ebe:	461c      	mov	r4, r3
 8002ec0:	f04f 0500 	mov.w	r5, #0
 8002ec4:	4622      	mov	r2, r4
 8002ec6:	462b      	mov	r3, r5
 8002ec8:	1891      	adds	r1, r2, r2
 8002eca:	6139      	str	r1, [r7, #16]
 8002ecc:	415b      	adcs	r3, r3
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ed4:	1912      	adds	r2, r2, r4
 8002ed6:	eb45 0303 	adc.w	r3, r5, r3
 8002eda:	f04f 0000 	mov.w	r0, #0
 8002ede:	f04f 0100 	mov.w	r1, #0
 8002ee2:	00d9      	lsls	r1, r3, #3
 8002ee4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ee8:	00d0      	lsls	r0, r2, #3
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	eb12 0804 	adds.w	r8, r2, r4
 8002ef2:	eb43 0905 	adc.w	r9, r3, r5
 8002ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f04f 0100 	mov.w	r1, #0
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	008b      	lsls	r3, r1, #2
 8002f0a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f0e:	0082      	lsls	r2, r0, #2
 8002f10:	4640      	mov	r0, r8
 8002f12:	4649      	mov	r1, r9
 8002f14:	f7fd f958 	bl	80001c8 <__aeabi_uldivmod>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4b49      	ldr	r3, [pc, #292]	; (8003044 <UART_SetConfig+0x38c>)
 8002f1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	011e      	lsls	r6, r3, #4
 8002f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f04f 0100 	mov.w	r1, #0
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	1894      	adds	r4, r2, r2
 8002f34:	60bc      	str	r4, [r7, #8]
 8002f36:	415b      	adcs	r3, r3
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f3e:	1812      	adds	r2, r2, r0
 8002f40:	eb41 0303 	adc.w	r3, r1, r3
 8002f44:	f04f 0400 	mov.w	r4, #0
 8002f48:	f04f 0500 	mov.w	r5, #0
 8002f4c:	00dd      	lsls	r5, r3, #3
 8002f4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f52:	00d4      	lsls	r4, r2, #3
 8002f54:	4622      	mov	r2, r4
 8002f56:	462b      	mov	r3, r5
 8002f58:	1814      	adds	r4, r2, r0
 8002f5a:	64bc      	str	r4, [r7, #72]	; 0x48
 8002f5c:	414b      	adcs	r3, r1
 8002f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f04f 0100 	mov.w	r1, #0
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	008b      	lsls	r3, r1, #2
 8002f74:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f78:	0082      	lsls	r2, r0, #2
 8002f7a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002f7e:	f7fd f923 	bl	80001c8 <__aeabi_uldivmod>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4b2f      	ldr	r3, [pc, #188]	; (8003044 <UART_SetConfig+0x38c>)
 8002f88:	fba3 1302 	umull	r1, r3, r3, r2
 8002f8c:	095b      	lsrs	r3, r3, #5
 8002f8e:	2164      	movs	r1, #100	; 0x64
 8002f90:	fb01 f303 	mul.w	r3, r1, r3
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	3332      	adds	r3, #50	; 0x32
 8002f9a:	4a2a      	ldr	r2, [pc, #168]	; (8003044 <UART_SetConfig+0x38c>)
 8002f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa0:	095b      	lsrs	r3, r3, #5
 8002fa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fa6:	441e      	add	r6, r3
 8002fa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002faa:	4618      	mov	r0, r3
 8002fac:	f04f 0100 	mov.w	r1, #0
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	1894      	adds	r4, r2, r2
 8002fb6:	603c      	str	r4, [r7, #0]
 8002fb8:	415b      	adcs	r3, r3
 8002fba:	607b      	str	r3, [r7, #4]
 8002fbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fc0:	1812      	adds	r2, r2, r0
 8002fc2:	eb41 0303 	adc.w	r3, r1, r3
 8002fc6:	f04f 0400 	mov.w	r4, #0
 8002fca:	f04f 0500 	mov.w	r5, #0
 8002fce:	00dd      	lsls	r5, r3, #3
 8002fd0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002fd4:	00d4      	lsls	r4, r2, #3
 8002fd6:	4622      	mov	r2, r4
 8002fd8:	462b      	mov	r3, r5
 8002fda:	eb12 0a00 	adds.w	sl, r2, r0
 8002fde:	eb43 0b01 	adc.w	fp, r3, r1
 8002fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f04f 0100 	mov.w	r1, #0
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	008b      	lsls	r3, r1, #2
 8002ff6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ffa:	0082      	lsls	r2, r0, #2
 8002ffc:	4650      	mov	r0, sl
 8002ffe:	4659      	mov	r1, fp
 8003000:	f7fd f8e2 	bl	80001c8 <__aeabi_uldivmod>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <UART_SetConfig+0x38c>)
 800300a:	fba3 1302 	umull	r1, r3, r3, r2
 800300e:	095b      	lsrs	r3, r3, #5
 8003010:	2164      	movs	r1, #100	; 0x64
 8003012:	fb01 f303 	mul.w	r3, r1, r3
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	3332      	adds	r3, #50	; 0x32
 800301c:	4a09      	ldr	r2, [pc, #36]	; (8003044 <UART_SetConfig+0x38c>)
 800301e:	fba2 2303 	umull	r2, r3, r2, r3
 8003022:	095b      	lsrs	r3, r3, #5
 8003024:	f003 020f 	and.w	r2, r3, #15
 8003028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4432      	add	r2, r6
 800302e:	609a      	str	r2, [r3, #8]
}
 8003030:	bf00      	nop
 8003032:	377c      	adds	r7, #124	; 0x7c
 8003034:	46bd      	mov	sp, r7
 8003036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800303a:	bf00      	nop
 800303c:	40011000 	.word	0x40011000
 8003040:	40011400 	.word	0x40011400
 8003044:	51eb851f 	.word	0x51eb851f

08003048 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003048:	b084      	sub	sp, #16
 800304a:	b580      	push	{r7, lr}
 800304c:	b084      	sub	sp, #16
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	f107 001c 	add.w	r0, r7, #28
 8003056:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800305a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305c:	2b01      	cmp	r3, #1
 800305e:	d122      	bne.n	80030a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003064:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800308a:	2b01      	cmp	r3, #1
 800308c:	d105      	bne.n	800309a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f001 fb1c 	bl	80046d8 <USB_CoreReset>
 80030a0:	4603      	mov	r3, r0
 80030a2:	73fb      	strb	r3, [r7, #15]
 80030a4:	e01a      	b.n	80030dc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f001 fb10 	bl	80046d8 <USB_CoreReset>
 80030b8:	4603      	mov	r3, r0
 80030ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80030bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d106      	bne.n	80030d0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	639a      	str	r2, [r3, #56]	; 0x38
 80030ce:	e005      	b.n	80030dc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80030dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d10b      	bne.n	80030fa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f043 0206 	orr.w	r2, r3, #6
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f043 0220 	orr.w	r2, r3, #32
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003106:	b004      	add	sp, #16
 8003108:	4770      	bx	lr
	...

0800310c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800310c:	b480      	push	{r7}
 800310e:	b087      	sub	sp, #28
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	4613      	mov	r3, r2
 8003118:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	2b02      	cmp	r3, #2
 800311e:	d165      	bne.n	80031ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	4a41      	ldr	r2, [pc, #260]	; (8003228 <USB_SetTurnaroundTime+0x11c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d906      	bls.n	8003136 <USB_SetTurnaroundTime+0x2a>
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	4a40      	ldr	r2, [pc, #256]	; (800322c <USB_SetTurnaroundTime+0x120>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d202      	bcs.n	8003136 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003130:	230f      	movs	r3, #15
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	e062      	b.n	80031fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	4a3c      	ldr	r2, [pc, #240]	; (800322c <USB_SetTurnaroundTime+0x120>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d306      	bcc.n	800314c <USB_SetTurnaroundTime+0x40>
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	4a3b      	ldr	r2, [pc, #236]	; (8003230 <USB_SetTurnaroundTime+0x124>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d202      	bcs.n	800314c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003146:	230e      	movs	r3, #14
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	e057      	b.n	80031fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	4a38      	ldr	r2, [pc, #224]	; (8003230 <USB_SetTurnaroundTime+0x124>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d306      	bcc.n	8003162 <USB_SetTurnaroundTime+0x56>
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	4a37      	ldr	r2, [pc, #220]	; (8003234 <USB_SetTurnaroundTime+0x128>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d202      	bcs.n	8003162 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800315c:	230d      	movs	r3, #13
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	e04c      	b.n	80031fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	4a33      	ldr	r2, [pc, #204]	; (8003234 <USB_SetTurnaroundTime+0x128>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d306      	bcc.n	8003178 <USB_SetTurnaroundTime+0x6c>
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	4a32      	ldr	r2, [pc, #200]	; (8003238 <USB_SetTurnaroundTime+0x12c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d802      	bhi.n	8003178 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003172:	230c      	movs	r3, #12
 8003174:	617b      	str	r3, [r7, #20]
 8003176:	e041      	b.n	80031fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	4a2f      	ldr	r2, [pc, #188]	; (8003238 <USB_SetTurnaroundTime+0x12c>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d906      	bls.n	800318e <USB_SetTurnaroundTime+0x82>
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	4a2e      	ldr	r2, [pc, #184]	; (800323c <USB_SetTurnaroundTime+0x130>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d802      	bhi.n	800318e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003188:	230b      	movs	r3, #11
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	e036      	b.n	80031fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	4a2a      	ldr	r2, [pc, #168]	; (800323c <USB_SetTurnaroundTime+0x130>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d906      	bls.n	80031a4 <USB_SetTurnaroundTime+0x98>
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	4a29      	ldr	r2, [pc, #164]	; (8003240 <USB_SetTurnaroundTime+0x134>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d802      	bhi.n	80031a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800319e:	230a      	movs	r3, #10
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	e02b      	b.n	80031fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	4a26      	ldr	r2, [pc, #152]	; (8003240 <USB_SetTurnaroundTime+0x134>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d906      	bls.n	80031ba <USB_SetTurnaroundTime+0xae>
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	4a25      	ldr	r2, [pc, #148]	; (8003244 <USB_SetTurnaroundTime+0x138>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d202      	bcs.n	80031ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80031b4:	2309      	movs	r3, #9
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	e020      	b.n	80031fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	4a21      	ldr	r2, [pc, #132]	; (8003244 <USB_SetTurnaroundTime+0x138>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d306      	bcc.n	80031d0 <USB_SetTurnaroundTime+0xc4>
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	4a20      	ldr	r2, [pc, #128]	; (8003248 <USB_SetTurnaroundTime+0x13c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d802      	bhi.n	80031d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80031ca:	2308      	movs	r3, #8
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	e015      	b.n	80031fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	4a1d      	ldr	r2, [pc, #116]	; (8003248 <USB_SetTurnaroundTime+0x13c>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d906      	bls.n	80031e6 <USB_SetTurnaroundTime+0xda>
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	4a1c      	ldr	r2, [pc, #112]	; (800324c <USB_SetTurnaroundTime+0x140>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d202      	bcs.n	80031e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80031e0:	2307      	movs	r3, #7
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	e00a      	b.n	80031fc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80031e6:	2306      	movs	r3, #6
 80031e8:	617b      	str	r3, [r7, #20]
 80031ea:	e007      	b.n	80031fc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d102      	bne.n	80031f8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80031f2:	2309      	movs	r3, #9
 80031f4:	617b      	str	r3, [r7, #20]
 80031f6:	e001      	b.n	80031fc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80031f8:	2309      	movs	r3, #9
 80031fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	029b      	lsls	r3, r3, #10
 8003210:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003214:	431a      	orrs	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	371c      	adds	r7, #28
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	00d8acbf 	.word	0x00d8acbf
 800322c:	00e4e1c0 	.word	0x00e4e1c0
 8003230:	00f42400 	.word	0x00f42400
 8003234:	01067380 	.word	0x01067380
 8003238:	011a499f 	.word	0x011a499f
 800323c:	01312cff 	.word	0x01312cff
 8003240:	014ca43f 	.word	0x014ca43f
 8003244:	016e3600 	.word	0x016e3600
 8003248:	01a6ab1f 	.word	0x01a6ab1f
 800324c:	01e84800 	.word	0x01e84800

08003250 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f043 0201 	orr.w	r2, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f023 0201 	bic.w	r2, r3, #1
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	460b      	mov	r3, r1
 800329e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80032b0:	78fb      	ldrb	r3, [r7, #3]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d115      	bne.n	80032e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80032c2:	2001      	movs	r0, #1
 80032c4:	f7fd fbe2 	bl	8000a8c <HAL_Delay>
      ms++;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	3301      	adds	r3, #1
 80032cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f001 f972 	bl	80045b8 <USB_GetMode>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d01e      	beq.n	8003318 <USB_SetCurrentMode+0x84>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2b31      	cmp	r3, #49	; 0x31
 80032de:	d9f0      	bls.n	80032c2 <USB_SetCurrentMode+0x2e>
 80032e0:	e01a      	b.n	8003318 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80032e2:	78fb      	ldrb	r3, [r7, #3]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d115      	bne.n	8003314 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80032f4:	2001      	movs	r0, #1
 80032f6:	f7fd fbc9 	bl	8000a8c <HAL_Delay>
      ms++;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	3301      	adds	r3, #1
 80032fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f001 f959 	bl	80045b8 <USB_GetMode>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d005      	beq.n	8003318 <USB_SetCurrentMode+0x84>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b31      	cmp	r3, #49	; 0x31
 8003310:	d9f0      	bls.n	80032f4 <USB_SetCurrentMode+0x60>
 8003312:	e001      	b.n	8003318 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e005      	b.n	8003324 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2b32      	cmp	r3, #50	; 0x32
 800331c:	d101      	bne.n	8003322 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800332c:	b084      	sub	sp, #16
 800332e:	b580      	push	{r7, lr}
 8003330:	b086      	sub	sp, #24
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
 8003336:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800333a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003346:	2300      	movs	r3, #0
 8003348:	613b      	str	r3, [r7, #16]
 800334a:	e009      	b.n	8003360 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	3340      	adds	r3, #64	; 0x40
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	2200      	movs	r2, #0
 8003358:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	3301      	adds	r3, #1
 800335e:	613b      	str	r3, [r7, #16]
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	2b0e      	cmp	r3, #14
 8003364:	d9f2      	bls.n	800334c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003368:	2b00      	cmp	r3, #0
 800336a:	d11c      	bne.n	80033a6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800337a:	f043 0302 	orr.w	r3, r3, #2
 800337e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003384:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003390:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	639a      	str	r2, [r3, #56]	; 0x38
 80033a4:	e00b      	b.n	80033be <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033aa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80033c4:	461a      	mov	r2, r3
 80033c6:	2300      	movs	r3, #0
 80033c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d0:	4619      	mov	r1, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d8:	461a      	mov	r2, r3
 80033da:	680b      	ldr	r3, [r1, #0]
 80033dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80033de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d10c      	bne.n	80033fe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80033e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d104      	bne.n	80033f4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80033ea:	2100      	movs	r1, #0
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f945 	bl	800367c <USB_SetDevSpeed>
 80033f2:	e008      	b.n	8003406 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80033f4:	2101      	movs	r1, #1
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f940 	bl	800367c <USB_SetDevSpeed>
 80033fc:	e003      	b.n	8003406 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80033fe:	2103      	movs	r1, #3
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f93b 	bl	800367c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003406:	2110      	movs	r1, #16
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f8f3 	bl	80035f4 <USB_FlushTxFifo>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 f90f 	bl	800363c <USB_FlushRxFifo>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800342e:	461a      	mov	r2, r3
 8003430:	2300      	movs	r3, #0
 8003432:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800343a:	461a      	mov	r2, r3
 800343c:	2300      	movs	r3, #0
 800343e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003446:	461a      	mov	r2, r3
 8003448:	2300      	movs	r3, #0
 800344a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800344c:	2300      	movs	r3, #0
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	e043      	b.n	80034da <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	015a      	lsls	r2, r3, #5
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4413      	add	r3, r2
 800345a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003464:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003468:	d118      	bne.n	800349c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10a      	bne.n	8003486 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4413      	add	r3, r2
 8003478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800347c:	461a      	mov	r2, r3
 800347e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003482:	6013      	str	r3, [r2, #0]
 8003484:	e013      	b.n	80034ae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	015a      	lsls	r2, r3, #5
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4413      	add	r3, r2
 800348e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003492:	461a      	mov	r2, r3
 8003494:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	e008      	b.n	80034ae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	015a      	lsls	r2, r3, #5
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4413      	add	r3, r2
 80034a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a8:	461a      	mov	r2, r3
 80034aa:	2300      	movs	r3, #0
 80034ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	015a      	lsls	r2, r3, #5
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	4413      	add	r3, r2
 80034b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ba:	461a      	mov	r2, r3
 80034bc:	2300      	movs	r3, #0
 80034be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	015a      	lsls	r2, r3, #5
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034cc:	461a      	mov	r2, r3
 80034ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80034d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	3301      	adds	r3, #1
 80034d8:	613b      	str	r3, [r7, #16]
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d3b7      	bcc.n	8003452 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80034e2:	2300      	movs	r3, #0
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	e043      	b.n	8003570 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	015a      	lsls	r2, r3, #5
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034fe:	d118      	bne.n	8003532 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10a      	bne.n	800351c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	015a      	lsls	r2, r3, #5
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	4413      	add	r3, r2
 800350e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003512:	461a      	mov	r2, r3
 8003514:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	e013      	b.n	8003544 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4413      	add	r3, r2
 8003524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003528:	461a      	mov	r2, r3
 800352a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	e008      	b.n	8003544 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	015a      	lsls	r2, r3, #5
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	4413      	add	r3, r2
 800353a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800353e:	461a      	mov	r2, r3
 8003540:	2300      	movs	r3, #0
 8003542:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	015a      	lsls	r2, r3, #5
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4413      	add	r3, r2
 800354c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003550:	461a      	mov	r2, r3
 8003552:	2300      	movs	r3, #0
 8003554:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4413      	add	r3, r2
 800355e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003562:	461a      	mov	r2, r3
 8003564:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003568:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	3301      	adds	r3, #1
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	429a      	cmp	r2, r3
 8003576:	d3b7      	bcc.n	80034e8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003586:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800358a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003598:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800359a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359c:	2b00      	cmp	r3, #0
 800359e:	d105      	bne.n	80035ac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	f043 0210 	orr.w	r2, r3, #16
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699a      	ldr	r2, [r3, #24]
 80035b0:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <USB_DevInit+0x2c4>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80035b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d005      	beq.n	80035ca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	f043 0208 	orr.w	r2, r3, #8
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80035ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d107      	bne.n	80035e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035d8:	f043 0304 	orr.w	r3, r3, #4
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80035e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035ec:	b004      	add	sp, #16
 80035ee:	4770      	bx	lr
 80035f0:	803c3800 	.word	0x803c3800

080035f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	019b      	lsls	r3, r3, #6
 8003606:	f043 0220 	orr.w	r2, r3, #32
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	3301      	adds	r3, #1
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	4a08      	ldr	r2, [pc, #32]	; (8003638 <USB_FlushTxFifo+0x44>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e006      	b.n	800362c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f003 0320 	and.w	r3, r3, #32
 8003626:	2b20      	cmp	r3, #32
 8003628:	d0f1      	beq.n	800360e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	00030d40 	.word	0x00030d40

0800363c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2210      	movs	r2, #16
 800364c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	3301      	adds	r3, #1
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	4a08      	ldr	r2, [pc, #32]	; (8003678 <USB_FlushRxFifo+0x3c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d901      	bls.n	800365e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e006      	b.n	800366c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0310 	and.w	r3, r3, #16
 8003666:	2b10      	cmp	r3, #16
 8003668:	d0f1      	beq.n	800364e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	00030d40 	.word	0x00030d40

0800367c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	460b      	mov	r3, r1
 8003686:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	78fb      	ldrb	r3, [r7, #3]
 8003696:	68f9      	ldr	r1, [r7, #12]
 8003698:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800369c:	4313      	orrs	r3, r2
 800369e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b087      	sub	sp, #28
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 0306 	and.w	r3, r3, #6
 80036c6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d102      	bne.n	80036d4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80036ce:	2300      	movs	r3, #0
 80036d0:	75fb      	strb	r3, [r7, #23]
 80036d2:	e00a      	b.n	80036ea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d002      	beq.n	80036e0 <USB_GetDevSpeed+0x32>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2b06      	cmp	r3, #6
 80036de:	d102      	bne.n	80036e6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80036e0:	2302      	movs	r3, #2
 80036e2:	75fb      	strb	r3, [r7, #23]
 80036e4:	e001      	b.n	80036ea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80036e6:	230f      	movs	r3, #15
 80036e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80036ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	371c      	adds	r7, #28
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	785b      	ldrb	r3, [r3, #1]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d13a      	bne.n	800378a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800371a:	69da      	ldr	r2, [r3, #28]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	f003 030f 	and.w	r3, r3, #15
 8003724:	2101      	movs	r1, #1
 8003726:	fa01 f303 	lsl.w	r3, r1, r3
 800372a:	b29b      	uxth	r3, r3
 800372c:	68f9      	ldr	r1, [r7, #12]
 800372e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003732:	4313      	orrs	r3, r2
 8003734:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	015a      	lsls	r2, r3, #5
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4413      	add	r3, r2
 800373e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d155      	bne.n	80037f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4413      	add	r3, r2
 8003754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	78db      	ldrb	r3, [r3, #3]
 8003766:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003768:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	059b      	lsls	r3, r3, #22
 800376e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003770:	4313      	orrs	r3, r2
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	0151      	lsls	r1, r2, #5
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	440a      	add	r2, r1
 800377a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800377e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003786:	6013      	str	r3, [r2, #0]
 8003788:	e036      	b.n	80037f8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003790:	69da      	ldr	r2, [r3, #28]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	2101      	movs	r1, #1
 800379c:	fa01 f303 	lsl.w	r3, r1, r3
 80037a0:	041b      	lsls	r3, r3, #16
 80037a2:	68f9      	ldr	r1, [r7, #12]
 80037a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037a8:	4313      	orrs	r3, r2
 80037aa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	015a      	lsls	r2, r3, #5
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4413      	add	r3, r2
 80037b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d11a      	bne.n	80037f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	78db      	ldrb	r3, [r3, #3]
 80037dc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80037de:	430b      	orrs	r3, r1
 80037e0:	4313      	orrs	r3, r2
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	0151      	lsls	r1, r2, #5
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	440a      	add	r2, r1
 80037ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037f6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
	...

08003808 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	785b      	ldrb	r3, [r3, #1]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d161      	bne.n	80038e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	015a      	lsls	r2, r3, #5
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4413      	add	r3, r2
 800382c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003836:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800383a:	d11f      	bne.n	800387c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	015a      	lsls	r2, r3, #5
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4413      	add	r3, r2
 8003844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	0151      	lsls	r1, r2, #5
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	440a      	add	r2, r1
 8003852:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003856:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800385a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	015a      	lsls	r2, r3, #5
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4413      	add	r3, r2
 8003864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	0151      	lsls	r1, r2, #5
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	440a      	add	r2, r1
 8003872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003876:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800387a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003882:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	f003 030f 	and.w	r3, r3, #15
 800388c:	2101      	movs	r1, #1
 800388e:	fa01 f303 	lsl.w	r3, r1, r3
 8003892:	b29b      	uxth	r3, r3
 8003894:	43db      	mvns	r3, r3
 8003896:	68f9      	ldr	r1, [r7, #12]
 8003898:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800389c:	4013      	ands	r3, r2
 800389e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a6:	69da      	ldr	r2, [r3, #28]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	f003 030f 	and.w	r3, r3, #15
 80038b0:	2101      	movs	r1, #1
 80038b2:	fa01 f303 	lsl.w	r3, r1, r3
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	68f9      	ldr	r1, [r7, #12]
 80038bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038c0:	4013      	ands	r3, r2
 80038c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	0159      	lsls	r1, r3, #5
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	440b      	add	r3, r1
 80038da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038de:	4619      	mov	r1, r3
 80038e0:	4b35      	ldr	r3, [pc, #212]	; (80039b8 <USB_DeactivateEndpoint+0x1b0>)
 80038e2:	4013      	ands	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]
 80038e6:	e060      	b.n	80039aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038fe:	d11f      	bne.n	8003940 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	0151      	lsls	r1, r2, #5
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	440a      	add	r2, r1
 8003916:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800391a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800391e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4413      	add	r3, r2
 8003928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	0151      	lsls	r1, r2, #5
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	440a      	add	r2, r1
 8003936:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800393a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800393e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003946:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	2101      	movs	r1, #1
 8003952:	fa01 f303 	lsl.w	r3, r1, r3
 8003956:	041b      	lsls	r3, r3, #16
 8003958:	43db      	mvns	r3, r3
 800395a:	68f9      	ldr	r1, [r7, #12]
 800395c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003960:	4013      	ands	r3, r2
 8003962:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800396a:	69da      	ldr	r2, [r3, #28]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	f003 030f 	and.w	r3, r3, #15
 8003974:	2101      	movs	r1, #1
 8003976:	fa01 f303 	lsl.w	r3, r1, r3
 800397a:	041b      	lsls	r3, r3, #16
 800397c:	43db      	mvns	r3, r3
 800397e:	68f9      	ldr	r1, [r7, #12]
 8003980:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003984:	4013      	ands	r3, r2
 8003986:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	0159      	lsls	r1, r3, #5
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	440b      	add	r3, r1
 800399e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a2:	4619      	mov	r1, r3
 80039a4:	4b05      	ldr	r3, [pc, #20]	; (80039bc <USB_DeactivateEndpoint+0x1b4>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	ec337800 	.word	0xec337800
 80039bc:	eff37800 	.word	0xeff37800

080039c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08a      	sub	sp, #40	; 0x28
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	4613      	mov	r3, r2
 80039cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	785b      	ldrb	r3, [r3, #1]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	f040 815c 	bne.w	8003c9a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d132      	bne.n	8003a50 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	0151      	lsls	r1, r2, #5
 80039fc:	69fa      	ldr	r2, [r7, #28]
 80039fe:	440a      	add	r2, r1
 8003a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	015a      	lsls	r2, r3, #5
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	0151      	lsls	r1, r2, #5
 8003a20:	69fa      	ldr	r2, [r7, #28]
 8003a22:	440a      	add	r2, r1
 8003a24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	015a      	lsls	r2, r3, #5
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	0151      	lsls	r1, r2, #5
 8003a40:	69fa      	ldr	r2, [r7, #28]
 8003a42:	440a      	add	r2, r1
 8003a44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a48:	0cdb      	lsrs	r3, r3, #19
 8003a4a:	04db      	lsls	r3, r3, #19
 8003a4c:	6113      	str	r3, [r2, #16]
 8003a4e:	e074      	b.n	8003b3a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	0151      	lsls	r1, r2, #5
 8003a62:	69fa      	ldr	r2, [r7, #28]
 8003a64:	440a      	add	r2, r1
 8003a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a6a:	0cdb      	lsrs	r3, r3, #19
 8003a6c:	04db      	lsls	r3, r3, #19
 8003a6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	0151      	lsls	r1, r2, #5
 8003a82:	69fa      	ldr	r2, [r7, #28]
 8003a84:	440a      	add	r2, r1
 8003a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	6959      	ldr	r1, [r3, #20]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	440b      	add	r3, r1
 8003aac:	1e59      	subs	r1, r3, #1
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ab6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003ab8:	4b9d      	ldr	r3, [pc, #628]	; (8003d30 <USB_EPStartXfer+0x370>)
 8003aba:	400b      	ands	r3, r1
 8003abc:	69b9      	ldr	r1, [r7, #24]
 8003abe:	0148      	lsls	r0, r1, #5
 8003ac0:	69f9      	ldr	r1, [r7, #28]
 8003ac2:	4401      	add	r1, r0
 8003ac4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad8:	691a      	ldr	r2, [r3, #16]
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae2:	69b9      	ldr	r1, [r7, #24]
 8003ae4:	0148      	lsls	r0, r1, #5
 8003ae6:	69f9      	ldr	r1, [r7, #28]
 8003ae8:	4401      	add	r1, r0
 8003aea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003aee:	4313      	orrs	r3, r2
 8003af0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	78db      	ldrb	r3, [r3, #3]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d11f      	bne.n	8003b3a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	0151      	lsls	r1, r2, #5
 8003b0c:	69fa      	ldr	r2, [r7, #28]
 8003b0e:	440a      	add	r2, r1
 8003b10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b14:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003b18:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	0151      	lsls	r1, r2, #5
 8003b2c:	69fa      	ldr	r2, [r7, #28]
 8003b2e:	440a      	add	r2, r1
 8003b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b38:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003b3a:	79fb      	ldrb	r3, [r7, #7]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d14b      	bne.n	8003bd8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d009      	beq.n	8003b5c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b54:	461a      	mov	r2, r3
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	78db      	ldrb	r3, [r3, #3]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d128      	bne.n	8003bb6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d110      	bne.n	8003b96 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	0151      	lsls	r1, r2, #5
 8003b86:	69fa      	ldr	r2, [r7, #28]
 8003b88:	440a      	add	r2, r1
 8003b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b92:	6013      	str	r3, [r2, #0]
 8003b94:	e00f      	b.n	8003bb6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	0151      	lsls	r1, r2, #5
 8003ba8:	69fa      	ldr	r2, [r7, #28]
 8003baa:	440a      	add	r2, r1
 8003bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bb4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	015a      	lsls	r2, r3, #5
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	0151      	lsls	r1, r2, #5
 8003bc8:	69fa      	ldr	r2, [r7, #28]
 8003bca:	440a      	add	r2, r1
 8003bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bd0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	e12f      	b.n	8003e38 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	0151      	lsls	r1, r2, #5
 8003bea:	69fa      	ldr	r2, [r7, #28]
 8003bec:	440a      	add	r2, r1
 8003bee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bf2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003bf6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	78db      	ldrb	r3, [r3, #3]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d015      	beq.n	8003c2c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 8117 	beq.w	8003e38 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c20:	69f9      	ldr	r1, [r7, #28]
 8003c22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c26:	4313      	orrs	r3, r2
 8003c28:	634b      	str	r3, [r1, #52]	; 0x34
 8003c2a:	e105      	b.n	8003e38 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d110      	bne.n	8003c5e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	015a      	lsls	r2, r3, #5
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	0151      	lsls	r1, r2, #5
 8003c4e:	69fa      	ldr	r2, [r7, #28]
 8003c50:	440a      	add	r2, r1
 8003c52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c5a:	6013      	str	r3, [r2, #0]
 8003c5c:	e00f      	b.n	8003c7e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	0151      	lsls	r1, r2, #5
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	440a      	add	r2, r1
 8003c74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c7c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	68d9      	ldr	r1, [r3, #12]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	781a      	ldrb	r2, [r3, #0]
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	b298      	uxth	r0, r3
 8003c8c:	79fb      	ldrb	r3, [r7, #7]
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	4603      	mov	r3, r0
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 fa2b 	bl	80040ee <USB_WritePacket>
 8003c98:	e0ce      	b.n	8003e38 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	0151      	lsls	r1, r2, #5
 8003cac:	69fa      	ldr	r2, [r7, #28]
 8003cae:	440a      	add	r2, r1
 8003cb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cb4:	0cdb      	lsrs	r3, r3, #19
 8003cb6:	04db      	lsls	r3, r3, #19
 8003cb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	015a      	lsls	r2, r3, #5
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	0151      	lsls	r1, r2, #5
 8003ccc:	69fa      	ldr	r2, [r7, #28]
 8003cce:	440a      	add	r2, r1
 8003cd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003cdc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d126      	bne.n	8003d34 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf2:	691a      	ldr	r2, [r3, #16]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cfc:	69b9      	ldr	r1, [r7, #24]
 8003cfe:	0148      	lsls	r0, r1, #5
 8003d00:	69f9      	ldr	r1, [r7, #28]
 8003d02:	4401      	add	r1, r0
 8003d04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	015a      	lsls	r2, r3, #5
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	0151      	lsls	r1, r2, #5
 8003d1e:	69fa      	ldr	r2, [r7, #28]
 8003d20:	440a      	add	r2, r1
 8003d22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d2a:	6113      	str	r3, [r2, #16]
 8003d2c:	e036      	b.n	8003d9c <USB_EPStartXfer+0x3dc>
 8003d2e:	bf00      	nop
 8003d30:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	695a      	ldr	r2, [r3, #20]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	1e5a      	subs	r2, r3, #1
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d48:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	015a      	lsls	r2, r3, #5
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	4413      	add	r3, r2
 8003d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d56:	691a      	ldr	r2, [r3, #16]
 8003d58:	8afb      	ldrh	r3, [r7, #22]
 8003d5a:	04d9      	lsls	r1, r3, #19
 8003d5c:	4b39      	ldr	r3, [pc, #228]	; (8003e44 <USB_EPStartXfer+0x484>)
 8003d5e:	400b      	ands	r3, r1
 8003d60:	69b9      	ldr	r1, [r7, #24]
 8003d62:	0148      	lsls	r0, r1, #5
 8003d64:	69f9      	ldr	r1, [r7, #28]
 8003d66:	4401      	add	r1, r0
 8003d68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7c:	691a      	ldr	r2, [r3, #16]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	8af9      	ldrh	r1, [r7, #22]
 8003d84:	fb01 f303 	mul.w	r3, r1, r3
 8003d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d8c:	69b9      	ldr	r1, [r7, #24]
 8003d8e:	0148      	lsls	r0, r1, #5
 8003d90:	69f9      	ldr	r1, [r7, #28]
 8003d92:	4401      	add	r1, r0
 8003d94:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d10d      	bne.n	8003dbe <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d009      	beq.n	8003dbe <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	68d9      	ldr	r1, [r3, #12]
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	015a      	lsls	r2, r3, #5
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dba:	460a      	mov	r2, r1
 8003dbc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	78db      	ldrb	r3, [r3, #3]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d128      	bne.n	8003e18 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d110      	bne.n	8003df8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	0151      	lsls	r1, r2, #5
 8003de8:	69fa      	ldr	r2, [r7, #28]
 8003dea:	440a      	add	r2, r1
 8003dec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003df0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	e00f      	b.n	8003e18 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	0151      	lsls	r1, r2, #5
 8003e0a:	69fa      	ldr	r2, [r7, #28]
 8003e0c:	440a      	add	r2, r1
 8003e0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e16:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	0151      	lsls	r1, r2, #5
 8003e2a:	69fa      	ldr	r2, [r7, #28]
 8003e2c:	440a      	add	r2, r1
 8003e2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3720      	adds	r7, #32
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	1ff80000 	.word	0x1ff80000

08003e48 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b087      	sub	sp, #28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	4613      	mov	r3, r2
 8003e54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	785b      	ldrb	r3, [r3, #1]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	f040 80cd 	bne.w	8004004 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d132      	bne.n	8003ed8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	015a      	lsls	r2, r3, #5
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	0151      	lsls	r1, r2, #5
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	440a      	add	r2, r1
 8003e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	015a      	lsls	r2, r3, #5
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	0151      	lsls	r1, r2, #5
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	440a      	add	r2, r1
 8003eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003eb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	0151      	lsls	r1, r2, #5
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	440a      	add	r2, r1
 8003ecc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ed0:	0cdb      	lsrs	r3, r3, #19
 8003ed2:	04db      	lsls	r3, r3, #19
 8003ed4:	6113      	str	r3, [r2, #16]
 8003ed6:	e04e      	b.n	8003f76 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	0151      	lsls	r1, r2, #5
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	440a      	add	r2, r1
 8003eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ef2:	0cdb      	lsrs	r3, r3, #19
 8003ef4:	04db      	lsls	r3, r3, #19
 8003ef6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	0151      	lsls	r1, r2, #5
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	440a      	add	r2, r1
 8003f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f12:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f16:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f1a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	695a      	ldr	r2, [r3, #20]
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d903      	bls.n	8003f30 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	0151      	lsls	r1, r2, #5
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	440a      	add	r2, r1
 8003f46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5c:	691a      	ldr	r2, [r3, #16]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f66:	6939      	ldr	r1, [r7, #16]
 8003f68:	0148      	lsls	r0, r1, #5
 8003f6a:	6979      	ldr	r1, [r7, #20]
 8003f6c:	4401      	add	r1, r0
 8003f6e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f72:	4313      	orrs	r3, r2
 8003f74:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d11e      	bne.n	8003fba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d009      	beq.n	8003f98 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f90:	461a      	mov	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	0151      	lsls	r1, r2, #5
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	440a      	add	r2, r1
 8003fae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003fb6:	6013      	str	r3, [r2, #0]
 8003fb8:	e092      	b.n	80040e0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	0151      	lsls	r1, r2, #5
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	440a      	add	r2, r1
 8003fd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fd4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003fd8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d07e      	beq.n	80040e0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	f003 030f 	and.w	r3, r3, #15
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff8:	6979      	ldr	r1, [r7, #20]
 8003ffa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ffe:	4313      	orrs	r3, r2
 8004000:	634b      	str	r3, [r1, #52]	; 0x34
 8004002:	e06d      	b.n	80040e0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	4413      	add	r3, r2
 800400c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	0151      	lsls	r1, r2, #5
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	440a      	add	r2, r1
 800401a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800401e:	0cdb      	lsrs	r3, r3, #19
 8004020:	04db      	lsls	r3, r3, #19
 8004022:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	4413      	add	r3, r2
 800402c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	0151      	lsls	r1, r2, #5
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	440a      	add	r2, r1
 800403a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800403e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004042:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004046:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	0151      	lsls	r1, r2, #5
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	440a      	add	r2, r1
 800406e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004072:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004076:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	4413      	add	r3, r2
 8004080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004084:	691a      	ldr	r2, [r3, #16]
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800408e:	6939      	ldr	r1, [r7, #16]
 8004090:	0148      	lsls	r0, r1, #5
 8004092:	6979      	ldr	r1, [r7, #20]
 8004094:	4401      	add	r1, r0
 8004096:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800409a:	4313      	orrs	r3, r2
 800409c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800409e:	79fb      	ldrb	r3, [r7, #7]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d10d      	bne.n	80040c0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d009      	beq.n	80040c0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	68d9      	ldr	r1, [r3, #12]
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040bc:	460a      	mov	r2, r1
 80040be:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	0151      	lsls	r1, r2, #5
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	440a      	add	r2, r1
 80040d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	371c      	adds	r7, #28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b089      	sub	sp, #36	; 0x24
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	60f8      	str	r0, [r7, #12]
 80040f6:	60b9      	str	r1, [r7, #8]
 80040f8:	4611      	mov	r1, r2
 80040fa:	461a      	mov	r2, r3
 80040fc:	460b      	mov	r3, r1
 80040fe:	71fb      	strb	r3, [r7, #7]
 8004100:	4613      	mov	r3, r2
 8004102:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800410c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004110:	2b00      	cmp	r3, #0
 8004112:	d123      	bne.n	800415c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004114:	88bb      	ldrh	r3, [r7, #4]
 8004116:	3303      	adds	r3, #3
 8004118:	089b      	lsrs	r3, r3, #2
 800411a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800411c:	2300      	movs	r3, #0
 800411e:	61bb      	str	r3, [r7, #24]
 8004120:	e018      	b.n	8004154 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004122:	79fb      	ldrb	r3, [r7, #7]
 8004124:	031a      	lsls	r2, r3, #12
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	4413      	add	r3, r2
 800412a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800412e:	461a      	mov	r2, r3
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	3301      	adds	r3, #1
 800413a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	3301      	adds	r3, #1
 8004140:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	3301      	adds	r3, #1
 8004146:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	3301      	adds	r3, #1
 800414c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	3301      	adds	r3, #1
 8004152:	61bb      	str	r3, [r7, #24]
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	429a      	cmp	r2, r3
 800415a:	d3e2      	bcc.n	8004122 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3724      	adds	r7, #36	; 0x24
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800416a:	b480      	push	{r7}
 800416c:	b08b      	sub	sp, #44	; 0x2c
 800416e:	af00      	add	r7, sp, #0
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	4613      	mov	r3, r2
 8004176:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004180:	88fb      	ldrh	r3, [r7, #6]
 8004182:	089b      	lsrs	r3, r3, #2
 8004184:	b29b      	uxth	r3, r3
 8004186:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004188:	88fb      	ldrh	r3, [r7, #6]
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004190:	2300      	movs	r3, #0
 8004192:	623b      	str	r3, [r7, #32]
 8004194:	e014      	b.n	80041c0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	601a      	str	r2, [r3, #0]
    pDest++;
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	3301      	adds	r3, #1
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	3301      	adds	r3, #1
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	3301      	adds	r3, #1
 80041b2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	3301      	adds	r3, #1
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	3301      	adds	r3, #1
 80041be:	623b      	str	r3, [r7, #32]
 80041c0:	6a3a      	ldr	r2, [r7, #32]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d3e6      	bcc.n	8004196 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80041c8:	8bfb      	ldrh	r3, [r7, #30]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d01e      	beq.n	800420c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80041ce:	2300      	movs	r3, #0
 80041d0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041d8:	461a      	mov	r2, r3
 80041da:	f107 0310 	add.w	r3, r7, #16
 80041de:	6812      	ldr	r2, [r2, #0]
 80041e0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	fa22 f303 	lsr.w	r3, r2, r3
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	701a      	strb	r2, [r3, #0]
      i++;
 80041f4:	6a3b      	ldr	r3, [r7, #32]
 80041f6:	3301      	adds	r3, #1
 80041f8:	623b      	str	r3, [r7, #32]
      pDest++;
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	3301      	adds	r3, #1
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004200:	8bfb      	ldrh	r3, [r7, #30]
 8004202:	3b01      	subs	r3, #1
 8004204:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004206:	8bfb      	ldrh	r3, [r7, #30]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1ea      	bne.n	80041e2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800420e:	4618      	mov	r0, r3
 8004210:	372c      	adds	r7, #44	; 0x2c
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800421a:	b480      	push	{r7}
 800421c:	b085      	sub	sp, #20
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	785b      	ldrb	r3, [r3, #1]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d12c      	bne.n	8004290 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4413      	add	r3, r2
 800423e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	db12      	blt.n	800426e <USB_EPSetStall+0x54>
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00f      	beq.n	800426e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	015a      	lsls	r2, r3, #5
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	4413      	add	r3, r2
 8004256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	0151      	lsls	r1, r2, #5
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	440a      	add	r2, r1
 8004264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004268:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800426c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	015a      	lsls	r2, r3, #5
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	4413      	add	r3, r2
 8004276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	0151      	lsls	r1, r2, #5
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	440a      	add	r2, r1
 8004284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004288:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	e02b      	b.n	80042e8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4413      	add	r3, r2
 8004298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	db12      	blt.n	80042c8 <USB_EPSetStall+0xae>
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00f      	beq.n	80042c8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	0151      	lsls	r1, r2, #5
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	440a      	add	r2, r1
 80042be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80042c6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	0151      	lsls	r1, r2, #5
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	440a      	add	r2, r1
 80042de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b085      	sub	sp, #20
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
 80042fe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	785b      	ldrb	r3, [r3, #1]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d128      	bne.n	8004364 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	0151      	lsls	r1, r2, #5
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	440a      	add	r2, r1
 8004328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800432c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004330:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	78db      	ldrb	r3, [r3, #3]
 8004336:	2b03      	cmp	r3, #3
 8004338:	d003      	beq.n	8004342 <USB_EPClearStall+0x4c>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	78db      	ldrb	r3, [r3, #3]
 800433e:	2b02      	cmp	r3, #2
 8004340:	d138      	bne.n	80043b4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	4413      	add	r3, r2
 800434a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	0151      	lsls	r1, r2, #5
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	440a      	add	r2, r1
 8004358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800435c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	e027      	b.n	80043b4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4413      	add	r3, r2
 800436c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	0151      	lsls	r1, r2, #5
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	440a      	add	r2, r1
 800437a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800437e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004382:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	78db      	ldrb	r3, [r3, #3]
 8004388:	2b03      	cmp	r3, #3
 800438a:	d003      	beq.n	8004394 <USB_EPClearStall+0x9e>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	78db      	ldrb	r3, [r3, #3]
 8004390:	2b02      	cmp	r3, #2
 8004392:	d10f      	bne.n	80043b4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	0151      	lsls	r1, r2, #5
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	440a      	add	r2, r1
 80043aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b085      	sub	sp, #20
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	460b      	mov	r3, r1
 80043cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043e0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80043e4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	78fb      	ldrb	r3, [r7, #3]
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80043f6:	68f9      	ldr	r1, [r7, #12]
 80043f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043fc:	4313      	orrs	r3, r2
 80043fe:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800440e:	b480      	push	{r7}
 8004410:	b085      	sub	sp, #20
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004428:	f023 0303 	bic.w	r3, r3, #3
 800442c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800443c:	f023 0302 	bic.w	r3, r3, #2
 8004440:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800446a:	f023 0303 	bic.w	r3, r3, #3
 800446e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800447e:	f043 0302 	orr.w	r3, r3, #2
 8004482:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004492:	b480      	push	{r7}
 8004494:	b085      	sub	sp, #20
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4013      	ands	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80044aa:	68fb      	ldr	r3, [r7, #12]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	4013      	ands	r3, r2
 80044da:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	0c1b      	lsrs	r3, r3, #16
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	4013      	ands	r3, r2
 800450e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	b29b      	uxth	r3, r3
}
 8004514:	4618      	mov	r0, r3
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4413      	add	r3, r2
 8004538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	4013      	ands	r3, r2
 800454c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800454e:	68bb      	ldr	r3, [r7, #8]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	460b      	mov	r3, r1
 8004566:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800457e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	f003 030f 	and.w	r3, r3, #15
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	fa22 f303 	lsr.w	r3, r2, r3
 800458c:	01db      	lsls	r3, r3, #7
 800458e:	b2db      	uxtb	r3, r3
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4313      	orrs	r3, r2
 8004594:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004596:	78fb      	ldrb	r3, [r7, #3]
 8004598:	015a      	lsls	r2, r3, #5
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	4413      	add	r3, r2
 800459e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4013      	ands	r3, r2
 80045a8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80045aa:	68bb      	ldr	r3, [r7, #8]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	371c      	adds	r7, #28
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	f003 0301 	and.w	r3, r3, #1
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80045f2:	f023 0307 	bic.w	r3, r3, #7
 80045f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800460a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
	...

0800461c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	460b      	mov	r3, r1
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	333c      	adds	r3, #60	; 0x3c
 8004632:	3304      	adds	r3, #4
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	4a26      	ldr	r2, [pc, #152]	; (80046d4 <USB_EP0_OutStart+0xb8>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d90a      	bls.n	8004656 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800464c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004650:	d101      	bne.n	8004656 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	e037      	b.n	80046c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465c:	461a      	mov	r2, r3
 800465e:	2300      	movs	r3, #0
 8004660:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004670:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004674:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004684:	f043 0318 	orr.w	r3, r3, #24
 8004688:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004698:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800469c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800469e:	7afb      	ldrb	r3, [r7, #11]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d10f      	bne.n	80046c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046aa:	461a      	mov	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046be:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80046c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	371c      	adds	r7, #28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	4f54300a 	.word	0x4f54300a

080046d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	3301      	adds	r3, #1
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	4a13      	ldr	r2, [pc, #76]	; (8004738 <USB_CoreReset+0x60>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d901      	bls.n	80046f4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e01a      	b.n	800472a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	daf3      	bge.n	80046e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	f043 0201 	orr.w	r2, r3, #1
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	3301      	adds	r3, #1
 8004710:	60fb      	str	r3, [r7, #12]
 8004712:	4a09      	ldr	r2, [pc, #36]	; (8004738 <USB_CoreReset+0x60>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d901      	bls.n	800471c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e006      	b.n	800472a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b01      	cmp	r3, #1
 8004726:	d0f1      	beq.n	800470c <USB_CoreReset+0x34>

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	00030d40 	.word	0x00030d40

0800473c <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	460b      	mov	r3, r1
 8004746:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8004748:	2018      	movs	r0, #24
 800474a:	f001 ffd5 	bl	80066f8 <USBD_static_malloc>
 800474e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d105      	bne.n	8004762 <USBD_CUSTOM_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800475e:	2302      	movs	r3, #2
 8004760:	e038      	b.n	80047d4 <USBD_CUSTOM_HID_Init+0x98>
  }

  pdev->pClassData = (void *)hhid;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	7c1b      	ldrb	r3, [r3, #16]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d107      	bne.n	8004782 <USBD_CUSTOM_HID_Init+0x46>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2205      	movs	r2, #5
 8004776:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2205      	movs	r2, #5
 800477c:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 8004780:	e006      	b.n	8004790 <USBD_CUSTOM_HID_Init+0x54>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8004790:	2302      	movs	r3, #2
 8004792:	2203      	movs	r2, #3
 8004794:	2181      	movs	r1, #129	; 0x81
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f001 fe9d 	bl	80064d6 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80047a2:	2302      	movs	r3, #2
 80047a4:	2203      	movs	r2, #3
 80047a6:	2101      	movs	r1, #1
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f001 fe94 	bl	80064d6 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	2302      	movs	r3, #2
 80047ca:	2101      	movs	r1, #1
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f001 ff71 	bl	80066b4 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	460b      	mov	r3, r1
 80047e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 80047e8:	2181      	movs	r1, #129	; 0x81
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f001 fe99 	bl	8006522 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 80047fc:	2101      	movs	r1, #1
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f001 fe8f 	bl	8006522 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00e      	beq.n	800483c <USBD_CUSTOM_HID_DeInit+0x60>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800482e:	4618      	mov	r0, r3
 8004830:	f001 ff70 	bl	8006714 <USBD_static_free>
    pdev->pClassData = NULL;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
	...

08004848 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b088      	sub	sp, #32
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004858:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800485a:	2300      	movs	r3, #0
 800485c:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800485e:	2300      	movs	r3, #0
 8004860:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8004862:	2300      	movs	r3, #0
 8004864:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8004870:	2303      	movs	r3, #3
 8004872:	e0ed      	b.n	8004a50 <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800487c:	2b00      	cmp	r3, #0
 800487e:	d052      	beq.n	8004926 <USBD_CUSTOM_HID_Setup+0xde>
 8004880:	2b20      	cmp	r3, #32
 8004882:	f040 80dd 	bne.w	8004a40 <USBD_CUSTOM_HID_Setup+0x1f8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	785b      	ldrb	r3, [r3, #1]
 800488a:	3b02      	subs	r3, #2
 800488c:	2b09      	cmp	r3, #9
 800488e:	d842      	bhi.n	8004916 <USBD_CUSTOM_HID_Setup+0xce>
 8004890:	a201      	add	r2, pc, #4	; (adr r2, 8004898 <USBD_CUSTOM_HID_Setup+0x50>)
 8004892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004896:	bf00      	nop
 8004898:	080048f1 	.word	0x080048f1
 800489c:	080048cf 	.word	0x080048cf
 80048a0:	08004917 	.word	0x08004917
 80048a4:	08004917 	.word	0x08004917
 80048a8:	08004917 	.word	0x08004917
 80048ac:	08004917 	.word	0x08004917
 80048b0:	08004917 	.word	0x08004917
 80048b4:	08004901 	.word	0x08004901
 80048b8:	080048df 	.word	0x080048df
 80048bc:	080048c1 	.word	0x080048c1
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	885b      	ldrh	r3, [r3, #2]
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	461a      	mov	r2, r3
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	605a      	str	r2, [r3, #4]
          break;
 80048cc:	e02a      	b.n	8004924 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	3304      	adds	r3, #4
 80048d2:	2201      	movs	r2, #1
 80048d4:	4619      	mov	r1, r3
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f001 fa6d 	bl	8005db6 <USBD_CtlSendData>
          break;
 80048dc:	e022      	b.n	8004924 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	885b      	ldrh	r3, [r3, #2]
 80048e2:	0a1b      	lsrs	r3, r3, #8
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	461a      	mov	r2, r3
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	609a      	str	r2, [r3, #8]
          break;
 80048ee:	e019      	b.n	8004924 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	3308      	adds	r3, #8
 80048f4:	2201      	movs	r2, #1
 80048f6:	4619      	mov	r1, r3
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f001 fa5c 	bl	8005db6 <USBD_CtlSendData>
          break;
 80048fe:	e011      	b.n	8004924 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	2201      	movs	r2, #1
 8004904:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8004906:	6939      	ldr	r1, [r7, #16]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	88db      	ldrh	r3, [r3, #6]
 800490c:	461a      	mov	r2, r3
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f001 fa7d 	bl	8005e0e <USBD_CtlPrepareRx>
          break;
 8004914:	e006      	b.n	8004924 <USBD_CUSTOM_HID_Setup+0xdc>

        default:
          USBD_CtlError(pdev, req);
 8004916:	6839      	ldr	r1, [r7, #0]
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f001 f9db 	bl	8005cd4 <USBD_CtlError>
          ret = USBD_FAIL;
 800491e:	2303      	movs	r3, #3
 8004920:	75fb      	strb	r3, [r7, #23]
          break;
 8004922:	bf00      	nop
      }
      break;
 8004924:	e093      	b.n	8004a4e <USBD_CUSTOM_HID_Setup+0x206>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	785b      	ldrb	r3, [r3, #1]
 800492a:	2b0b      	cmp	r3, #11
 800492c:	d87f      	bhi.n	8004a2e <USBD_CUSTOM_HID_Setup+0x1e6>
 800492e:	a201      	add	r2, pc, #4	; (adr r2, 8004934 <USBD_CUSTOM_HID_Setup+0xec>)
 8004930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004934:	08004965 	.word	0x08004965
 8004938:	08004a3d 	.word	0x08004a3d
 800493c:	08004a2f 	.word	0x08004a2f
 8004940:	08004a2f 	.word	0x08004a2f
 8004944:	08004a2f 	.word	0x08004a2f
 8004948:	08004a2f 	.word	0x08004a2f
 800494c:	0800498f 	.word	0x0800498f
 8004950:	08004a2f 	.word	0x08004a2f
 8004954:	08004a2f 	.word	0x08004a2f
 8004958:	08004a2f 	.word	0x08004a2f
 800495c:	080049dd 	.word	0x080049dd
 8004960:	08004a07 	.word	0x08004a07
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b03      	cmp	r3, #3
 800496e:	d107      	bne.n	8004980 <USBD_CUSTOM_HID_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004970:	f107 030e 	add.w	r3, r7, #14
 8004974:	2202      	movs	r2, #2
 8004976:	4619      	mov	r1, r3
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f001 fa1c 	bl	8005db6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800497e:	e05e      	b.n	8004a3e <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8004980:	6839      	ldr	r1, [r7, #0]
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f001 f9a6 	bl	8005cd4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004988:	2303      	movs	r3, #3
 800498a:	75fb      	strb	r3, [r7, #23]
          break;
 800498c:	e057      	b.n	8004a3e <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	885b      	ldrh	r3, [r3, #2]
 8004992:	0a1b      	lsrs	r3, r3, #8
 8004994:	b29b      	uxth	r3, r3
 8004996:	2b22      	cmp	r3, #34	; 0x22
 8004998:	d10b      	bne.n	80049b2 <USBD_CUSTOM_HID_Setup+0x16a>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	88db      	ldrh	r3, [r3, #6]
 800499e:	2b41      	cmp	r3, #65	; 0x41
 80049a0:	bf28      	it	cs
 80049a2:	2341      	movcs	r3, #65	; 0x41
 80049a4:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	61bb      	str	r3, [r7, #24]
 80049b0:	e00d      	b.n	80049ce <USBD_CUSTOM_HID_Setup+0x186>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	885b      	ldrh	r3, [r3, #2]
 80049b6:	0a1b      	lsrs	r3, r3, #8
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b21      	cmp	r3, #33	; 0x21
 80049bc:	d107      	bne.n	80049ce <USBD_CUSTOM_HID_Setup+0x186>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80049be:	4b26      	ldr	r3, [pc, #152]	; (8004a58 <USBD_CUSTOM_HID_Setup+0x210>)
 80049c0:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	88db      	ldrh	r3, [r3, #6]
 80049c6:	2b09      	cmp	r3, #9
 80049c8:	bf28      	it	cs
 80049ca:	2309      	movcs	r3, #9
 80049cc:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 80049ce:	8bfb      	ldrh	r3, [r7, #30]
 80049d0:	461a      	mov	r2, r3
 80049d2:	69b9      	ldr	r1, [r7, #24]
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f001 f9ee 	bl	8005db6 <USBD_CtlSendData>
          break;
 80049da:	e030      	b.n	8004a3e <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b03      	cmp	r3, #3
 80049e6:	d107      	bne.n	80049f8 <USBD_CUSTOM_HID_Setup+0x1b0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	330c      	adds	r3, #12
 80049ec:	2201      	movs	r2, #1
 80049ee:	4619      	mov	r1, r3
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f001 f9e0 	bl	8005db6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80049f6:	e022      	b.n	8004a3e <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 80049f8:	6839      	ldr	r1, [r7, #0]
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f001 f96a 	bl	8005cd4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004a00:	2303      	movs	r3, #3
 8004a02:	75fb      	strb	r3, [r7, #23]
          break;
 8004a04:	e01b      	b.n	8004a3e <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d106      	bne.n	8004a20 <USBD_CUSTOM_HID_Setup+0x1d8>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	885b      	ldrh	r3, [r3, #2]
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	461a      	mov	r2, r3
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004a1e:	e00e      	b.n	8004a3e <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8004a20:	6839      	ldr	r1, [r7, #0]
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f001 f956 	bl	8005cd4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	75fb      	strb	r3, [r7, #23]
          break;
 8004a2c:	e007      	b.n	8004a3e <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004a2e:	6839      	ldr	r1, [r7, #0]
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f001 f94f 	bl	8005cd4 <USBD_CtlError>
          ret = USBD_FAIL;
 8004a36:	2303      	movs	r3, #3
 8004a38:	75fb      	strb	r3, [r7, #23]
          break;
 8004a3a:	e000      	b.n	8004a3e <USBD_CUSTOM_HID_Setup+0x1f6>
          break;
 8004a3c:	bf00      	nop
      }
      break;
 8004a3e:	e006      	b.n	8004a4e <USBD_CUSTOM_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 8004a40:	6839      	ldr	r1, [r7, #0]
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f001 f946 	bl	8005cd4 <USBD_CtlError>
      ret = USBD_FAIL;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a4c:	bf00      	nop
  }
  return (uint8_t)ret;
 8004a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3720      	adds	r7, #32
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	200000c8 	.word	0x200000c8

08004a5c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2229      	movs	r2, #41	; 0x29
 8004a68:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 8004a6a:	4b03      	ldr	r3, [pc, #12]	; (8004a78 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	20000044 	.word	0x20000044

08004a7c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2229      	movs	r2, #41	; 0x29
 8004a88:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 8004a8a:	4b03      	ldr	r3, [pc, #12]	; (8004a98 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	20000070 	.word	0x20000070

08004a9c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2229      	movs	r2, #41	; 0x29
 8004aa8:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8004aaa:	4b03      	ldr	r3, [pc, #12]	; (8004ab8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	2000009c 	.word	0x2000009c

08004abc <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ace:	2200      	movs	r2, #0
 8004ad0:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e00e      	b.n	8004b18 <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b00:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	7810      	ldrb	r0, [r2, #0]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	7852      	ldrb	r2, [r2, #1]
 8004b12:	4611      	mov	r1, r2
 8004b14:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <USBD_CUSTOM_HID_ReceivePacket+0x16>
  {
    return (uint8_t)USBD_FAIL;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e00a      	b.n	8004b4c <USBD_CUSTOM_HID_ReceivePacket+0x2c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b3c:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	2302      	movs	r3, #2
 8004b42:	2101      	movs	r1, #1
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f001 fdb5 	bl	80066b4 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b62:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e011      	b.n	8004b92 <USBD_CUSTOM_HID_EP0_RxReady+0x3e>
  }

  if (hhid->IsReportAvailable == 1U)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d10c      	bne.n	8004b90 <USBD_CUSTOM_HID_EP0_RxReady+0x3c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	7810      	ldrb	r0, [r2, #0]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	7852      	ldrb	r2, [r2, #1]
 8004b86:	4611      	mov	r1, r2
 8004b88:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
	...

08004b9c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	220a      	movs	r2, #10
 8004ba8:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8004baa:	4b03      	ldr	r3, [pc, #12]	; (8004bb8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	200000d4 	.word	0x200000d4

08004bbc <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e004      	b.n	8004bda <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b086      	sub	sp, #24
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	60f8      	str	r0, [r7, #12]
 8004bee:	60b9      	str	r1, [r7, #8]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e01f      	b.n	8004c3e <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	79fa      	ldrb	r2, [r7, #7]
 8004c30:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f001 fbe8 	bl	8006408 <USBD_LL_Init>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3718      	adds	r7, #24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b084      	sub	sp, #16
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
 8004c4e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e016      	b.n	8004c8c <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00b      	beq.n	8004c8a <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7a:	f107 020e 	add.w	r2, r7, #14
 8004c7e:	4610      	mov	r0, r2
 8004c80:	4798      	blx	r3
 8004c82:	4602      	mov	r2, r0
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f001 fbff 	bl	80064a0 <USBD_LL_Start>
 8004ca2:	4603      	mov	r3, r0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3708      	adds	r7, #8
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b084      	sub	sp, #16
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
 8004cca:	460b      	mov	r3, r1
 8004ccc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d009      	beq.n	8004cf0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	78fa      	ldrb	r2, [r7, #3]
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	4798      	blx	r3
 8004cec:	4603      	mov	r3, r0
 8004cee:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b082      	sub	sp, #8
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
 8004d02:	460b      	mov	r3, r1
 8004d04:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d007      	beq.n	8004d20 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	78fa      	ldrb	r2, [r7, #3]
 8004d1a:	4611      	mov	r1, r2
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	4798      	blx	r3
  }

  return USBD_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b084      	sub	sp, #16
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
 8004d32:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004d3a:	6839      	ldr	r1, [r7, #0]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 ff8f 	bl	8005c60 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004d50:	461a      	mov	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004d5e:	f003 031f 	and.w	r3, r3, #31
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d01a      	beq.n	8004d9c <USBD_LL_SetupStage+0x72>
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d822      	bhi.n	8004db0 <USBD_LL_SetupStage+0x86>
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d002      	beq.n	8004d74 <USBD_LL_SetupStage+0x4a>
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d00a      	beq.n	8004d88 <USBD_LL_SetupStage+0x5e>
 8004d72:	e01d      	b.n	8004db0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 fa61 	bl	8005244 <USBD_StdDevReq>
 8004d82:	4603      	mov	r3, r0
 8004d84:	73fb      	strb	r3, [r7, #15]
      break;
 8004d86:	e020      	b.n	8004dca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004d8e:	4619      	mov	r1, r3
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 fac5 	bl	8005320 <USBD_StdItfReq>
 8004d96:	4603      	mov	r3, r0
 8004d98:	73fb      	strb	r3, [r7, #15]
      break;
 8004d9a:	e016      	b.n	8004dca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004da2:	4619      	mov	r1, r3
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 fb04 	bl	80053b2 <USBD_StdEPReq>
 8004daa:	4603      	mov	r3, r0
 8004dac:	73fb      	strb	r3, [r7, #15]
      break;
 8004dae:	e00c      	b.n	8004dca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004db6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f001 fbce 	bl	8006560 <USBD_LL_StallEP>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8004dc8:	bf00      	nop
  }

  return ret;
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	460b      	mov	r3, r1
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004de2:	7afb      	ldrb	r3, [r7, #11]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d138      	bne.n	8004e5a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004dee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004df6:	2b03      	cmp	r3, #3
 8004df8:	d14a      	bne.n	8004e90 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	689a      	ldr	r2, [r3, #8]
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d913      	bls.n	8004e2e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	1ad2      	subs	r2, r2, r3
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	bf28      	it	cs
 8004e20:	4613      	movcs	r3, r2
 8004e22:	461a      	mov	r2, r3
 8004e24:	6879      	ldr	r1, [r7, #4]
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f001 f80e 	bl	8005e48 <USBD_CtlContinueRx>
 8004e2c:	e030      	b.n	8004e90 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	d10b      	bne.n	8004e52 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d005      	beq.n	8004e52 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f001 f809 	bl	8005e6a <USBD_CtlSendStatus>
 8004e58:	e01a      	b.n	8004e90 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b03      	cmp	r3, #3
 8004e64:	d114      	bne.n	8004e90 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00e      	beq.n	8004e90 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	7afa      	ldrb	r2, [r7, #11]
 8004e7c:	4611      	mov	r1, r2
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	4798      	blx	r3
 8004e82:	4603      	mov	r3, r0
 8004e84:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004e86:	7dfb      	ldrb	r3, [r7, #23]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8004e8c:	7dfb      	ldrb	r3, [r7, #23]
 8004e8e:	e000      	b.n	8004e92 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3718      	adds	r7, #24
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b086      	sub	sp, #24
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	60f8      	str	r0, [r7, #12]
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	607a      	str	r2, [r7, #4]
 8004ea6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004ea8:	7afb      	ldrb	r3, [r7, #11]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d16b      	bne.n	8004f86 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	3314      	adds	r3, #20
 8004eb2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d156      	bne.n	8004f6c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	689a      	ldr	r2, [r3, #8]
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d914      	bls.n	8004ef4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	689a      	ldr	r2, [r3, #8]
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	1ad2      	subs	r2, r2, r3
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	461a      	mov	r2, r3
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 ff83 	bl	8005dec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	2200      	movs	r2, #0
 8004eea:	2100      	movs	r1, #0
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f001 fbe1 	bl	80066b4 <USBD_LL_PrepareReceive>
 8004ef2:	e03b      	b.n	8004f6c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d11c      	bne.n	8004f3a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d316      	bcc.n	8004f3a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d20f      	bcs.n	8004f3a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 ff64 	bl	8005dec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	2200      	movs	r2, #0
 8004f30:	2100      	movs	r1, #0
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f001 fbbe 	bl	80066b4 <USBD_LL_PrepareReceive>
 8004f38:	e018      	b.n	8004f6c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b03      	cmp	r3, #3
 8004f44:	d10b      	bne.n	8004f5e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d005      	beq.n	8004f5e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004f5e:	2180      	movs	r1, #128	; 0x80
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f001 fafd 	bl	8006560 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 ff92 	bl	8005e90 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d122      	bne.n	8004fbc <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f7ff fe98 	bl	8004cac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004f84:	e01a      	b.n	8004fbc <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b03      	cmp	r3, #3
 8004f90:	d114      	bne.n	8004fbc <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00e      	beq.n	8004fbc <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	7afa      	ldrb	r2, [r7, #11]
 8004fa8:	4611      	mov	r1, r2
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	4798      	blx	r3
 8004fae:	4603      	mov	r3, r0
 8004fb0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004fb2:	7dfb      	ldrb	r3, [r7, #23]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8004fb8:	7dfb      	ldrb	r3, [r7, #23]
 8004fba:	e000      	b.n	8004fbe <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b082      	sub	sp, #8
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e02f      	b.n	800505a <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00f      	beq.n	8005024 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d009      	beq.n	8005024 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6852      	ldr	r2, [r2, #4]
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	4611      	mov	r1, r2
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005024:	2340      	movs	r3, #64	; 0x40
 8005026:	2200      	movs	r2, #0
 8005028:	2100      	movs	r1, #0
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f001 fa53 	bl	80064d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2240      	movs	r2, #64	; 0x40
 800503c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005040:	2340      	movs	r3, #64	; 0x40
 8005042:	2200      	movs	r2, #0
 8005044:	2180      	movs	r1, #128	; 0x80
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f001 fa45 	bl	80064d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2240      	movs	r2, #64	; 0x40
 8005056:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	460b      	mov	r3, r1
 800506c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	78fa      	ldrb	r2, [r7, #3]
 8005072:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005090:	b2da      	uxtb	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2204      	movs	r2, #4
 800509c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b04      	cmp	r3, #4
 80050c0:	d106      	bne.n	80050d0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b082      	sub	sp, #8
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d101      	bne.n	80050f4 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e012      	b.n	800511a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b03      	cmp	r3, #3
 80050fe:	d10b      	bne.n	8005118 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005106:	69db      	ldr	r3, [r3, #28]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d005      	beq.n	8005118 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b082      	sub	sp, #8
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
 800512a:	460b      	mov	r3, r1
 800512c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005134:	2b00      	cmp	r3, #0
 8005136:	d101      	bne.n	800513c <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005138:	2303      	movs	r3, #3
 800513a:	e014      	b.n	8005166 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b03      	cmp	r3, #3
 8005146:	d10d      	bne.n	8005164 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d007      	beq.n	8005164 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	78fa      	ldrb	r2, [r7, #3]
 800515e:	4611      	mov	r1, r2
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b082      	sub	sp, #8
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
 8005176:	460b      	mov	r3, r1
 8005178:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005184:	2303      	movs	r3, #3
 8005186:	e014      	b.n	80051b2 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b03      	cmp	r3, #3
 8005192:	d10d      	bne.n	80051b0 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	2b00      	cmp	r3, #0
 800519e:	d007      	beq.n	80051b0 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	78fa      	ldrb	r2, [r7, #3]
 80051aa:	4611      	mov	r1, r2
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b083      	sub	sp, #12
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d009      	beq.n	80051fe <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	6852      	ldr	r2, [r2, #4]
 80051f6:	b2d2      	uxtb	r2, r2
 80051f8:	4611      	mov	r1, r2
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	4798      	blx	r3
  }

  return USBD_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	3301      	adds	r3, #1
 800521e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005226:	8a3b      	ldrh	r3, [r7, #16]
 8005228:	021b      	lsls	r3, r3, #8
 800522a:	b21a      	sxth	r2, r3
 800522c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005230:	4313      	orrs	r3, r2
 8005232:	b21b      	sxth	r3, r3
 8005234:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005236:	89fb      	ldrh	r3, [r7, #14]
}
 8005238:	4618      	mov	r0, r3
 800523a:	371c      	adds	r7, #28
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800524e:	2300      	movs	r3, #0
 8005250:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800525a:	2b40      	cmp	r3, #64	; 0x40
 800525c:	d005      	beq.n	800526a <USBD_StdDevReq+0x26>
 800525e:	2b40      	cmp	r3, #64	; 0x40
 8005260:	d853      	bhi.n	800530a <USBD_StdDevReq+0xc6>
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00b      	beq.n	800527e <USBD_StdDevReq+0x3a>
 8005266:	2b20      	cmp	r3, #32
 8005268:	d14f      	bne.n	800530a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	6839      	ldr	r1, [r7, #0]
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	4798      	blx	r3
 8005278:	4603      	mov	r3, r0
 800527a:	73fb      	strb	r3, [r7, #15]
      break;
 800527c:	e04a      	b.n	8005314 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	785b      	ldrb	r3, [r3, #1]
 8005282:	2b09      	cmp	r3, #9
 8005284:	d83b      	bhi.n	80052fe <USBD_StdDevReq+0xba>
 8005286:	a201      	add	r2, pc, #4	; (adr r2, 800528c <USBD_StdDevReq+0x48>)
 8005288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528c:	080052e1 	.word	0x080052e1
 8005290:	080052f5 	.word	0x080052f5
 8005294:	080052ff 	.word	0x080052ff
 8005298:	080052eb 	.word	0x080052eb
 800529c:	080052ff 	.word	0x080052ff
 80052a0:	080052bf 	.word	0x080052bf
 80052a4:	080052b5 	.word	0x080052b5
 80052a8:	080052ff 	.word	0x080052ff
 80052ac:	080052d7 	.word	0x080052d7
 80052b0:	080052c9 	.word	0x080052c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80052b4:	6839      	ldr	r1, [r7, #0]
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f9de 	bl	8005678 <USBD_GetDescriptor>
          break;
 80052bc:	e024      	b.n	8005308 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80052be:	6839      	ldr	r1, [r7, #0]
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 fb43 	bl	800594c <USBD_SetAddress>
          break;
 80052c6:	e01f      	b.n	8005308 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80052c8:	6839      	ldr	r1, [r7, #0]
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 fb82 	bl	80059d4 <USBD_SetConfig>
 80052d0:	4603      	mov	r3, r0
 80052d2:	73fb      	strb	r3, [r7, #15]
          break;
 80052d4:	e018      	b.n	8005308 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80052d6:	6839      	ldr	r1, [r7, #0]
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 fc21 	bl	8005b20 <USBD_GetConfig>
          break;
 80052de:	e013      	b.n	8005308 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80052e0:	6839      	ldr	r1, [r7, #0]
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 fc52 	bl	8005b8c <USBD_GetStatus>
          break;
 80052e8:	e00e      	b.n	8005308 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80052ea:	6839      	ldr	r1, [r7, #0]
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 fc81 	bl	8005bf4 <USBD_SetFeature>
          break;
 80052f2:	e009      	b.n	8005308 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80052f4:	6839      	ldr	r1, [r7, #0]
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fc90 	bl	8005c1c <USBD_ClrFeature>
          break;
 80052fc:	e004      	b.n	8005308 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80052fe:	6839      	ldr	r1, [r7, #0]
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 fce7 	bl	8005cd4 <USBD_CtlError>
          break;
 8005306:	bf00      	nop
      }
      break;
 8005308:	e004      	b.n	8005314 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800530a:	6839      	ldr	r1, [r7, #0]
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fce1 	bl	8005cd4 <USBD_CtlError>
      break;
 8005312:	bf00      	nop
  }

  return ret;
 8005314:	7bfb      	ldrb	r3, [r7, #15]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop

08005320 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800532a:	2300      	movs	r3, #0
 800532c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005336:	2b40      	cmp	r3, #64	; 0x40
 8005338:	d005      	beq.n	8005346 <USBD_StdItfReq+0x26>
 800533a:	2b40      	cmp	r3, #64	; 0x40
 800533c:	d82f      	bhi.n	800539e <USBD_StdItfReq+0x7e>
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <USBD_StdItfReq+0x26>
 8005342:	2b20      	cmp	r3, #32
 8005344:	d12b      	bne.n	800539e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800534c:	b2db      	uxtb	r3, r3
 800534e:	3b01      	subs	r3, #1
 8005350:	2b02      	cmp	r3, #2
 8005352:	d81d      	bhi.n	8005390 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	889b      	ldrh	r3, [r3, #4]
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b01      	cmp	r3, #1
 800535c:	d813      	bhi.n	8005386 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	6839      	ldr	r1, [r7, #0]
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	4798      	blx	r3
 800536c:	4603      	mov	r3, r0
 800536e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	88db      	ldrh	r3, [r3, #6]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d110      	bne.n	800539a <USBD_StdItfReq+0x7a>
 8005378:	7bfb      	ldrb	r3, [r7, #15]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10d      	bne.n	800539a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fd73 	bl	8005e6a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005384:	e009      	b.n	800539a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005386:	6839      	ldr	r1, [r7, #0]
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 fca3 	bl	8005cd4 <USBD_CtlError>
          break;
 800538e:	e004      	b.n	800539a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005390:	6839      	ldr	r1, [r7, #0]
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 fc9e 	bl	8005cd4 <USBD_CtlError>
          break;
 8005398:	e000      	b.n	800539c <USBD_StdItfReq+0x7c>
          break;
 800539a:	bf00      	nop
      }
      break;
 800539c:	e004      	b.n	80053a8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800539e:	6839      	ldr	r1, [r7, #0]
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fc97 	bl	8005cd4 <USBD_CtlError>
      break;
 80053a6:	bf00      	nop
  }

  return ret;
 80053a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b084      	sub	sp, #16
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
 80053ba:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80053bc:	2300      	movs	r3, #0
 80053be:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	889b      	ldrh	r3, [r3, #4]
 80053c4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80053ce:	2b40      	cmp	r3, #64	; 0x40
 80053d0:	d007      	beq.n	80053e2 <USBD_StdEPReq+0x30>
 80053d2:	2b40      	cmp	r3, #64	; 0x40
 80053d4:	f200 8145 	bhi.w	8005662 <USBD_StdEPReq+0x2b0>
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00c      	beq.n	80053f6 <USBD_StdEPReq+0x44>
 80053dc:	2b20      	cmp	r3, #32
 80053de:	f040 8140 	bne.w	8005662 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	6839      	ldr	r1, [r7, #0]
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	4798      	blx	r3
 80053f0:	4603      	mov	r3, r0
 80053f2:	73fb      	strb	r3, [r7, #15]
      break;
 80053f4:	e13a      	b.n	800566c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	785b      	ldrb	r3, [r3, #1]
 80053fa:	2b03      	cmp	r3, #3
 80053fc:	d007      	beq.n	800540e <USBD_StdEPReq+0x5c>
 80053fe:	2b03      	cmp	r3, #3
 8005400:	f300 8129 	bgt.w	8005656 <USBD_StdEPReq+0x2a4>
 8005404:	2b00      	cmp	r3, #0
 8005406:	d07f      	beq.n	8005508 <USBD_StdEPReq+0x156>
 8005408:	2b01      	cmp	r3, #1
 800540a:	d03c      	beq.n	8005486 <USBD_StdEPReq+0xd4>
 800540c:	e123      	b.n	8005656 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b02      	cmp	r3, #2
 8005418:	d002      	beq.n	8005420 <USBD_StdEPReq+0x6e>
 800541a:	2b03      	cmp	r3, #3
 800541c:	d016      	beq.n	800544c <USBD_StdEPReq+0x9a>
 800541e:	e02c      	b.n	800547a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005420:	7bbb      	ldrb	r3, [r7, #14]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00d      	beq.n	8005442 <USBD_StdEPReq+0x90>
 8005426:	7bbb      	ldrb	r3, [r7, #14]
 8005428:	2b80      	cmp	r3, #128	; 0x80
 800542a:	d00a      	beq.n	8005442 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800542c:	7bbb      	ldrb	r3, [r7, #14]
 800542e:	4619      	mov	r1, r3
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f001 f895 	bl	8006560 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005436:	2180      	movs	r1, #128	; 0x80
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f001 f891 	bl	8006560 <USBD_LL_StallEP>
 800543e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005440:	e020      	b.n	8005484 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005442:	6839      	ldr	r1, [r7, #0]
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 fc45 	bl	8005cd4 <USBD_CtlError>
              break;
 800544a:	e01b      	b.n	8005484 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	885b      	ldrh	r3, [r3, #2]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10e      	bne.n	8005472 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005454:	7bbb      	ldrb	r3, [r7, #14]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00b      	beq.n	8005472 <USBD_StdEPReq+0xc0>
 800545a:	7bbb      	ldrb	r3, [r7, #14]
 800545c:	2b80      	cmp	r3, #128	; 0x80
 800545e:	d008      	beq.n	8005472 <USBD_StdEPReq+0xc0>
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	88db      	ldrh	r3, [r3, #6]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d104      	bne.n	8005472 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005468:	7bbb      	ldrb	r3, [r7, #14]
 800546a:	4619      	mov	r1, r3
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f001 f877 	bl	8006560 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 fcf9 	bl	8005e6a <USBD_CtlSendStatus>

              break;
 8005478:	e004      	b.n	8005484 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800547a:	6839      	ldr	r1, [r7, #0]
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 fc29 	bl	8005cd4 <USBD_CtlError>
              break;
 8005482:	bf00      	nop
          }
          break;
 8005484:	e0ec      	b.n	8005660 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d002      	beq.n	8005498 <USBD_StdEPReq+0xe6>
 8005492:	2b03      	cmp	r3, #3
 8005494:	d016      	beq.n	80054c4 <USBD_StdEPReq+0x112>
 8005496:	e030      	b.n	80054fa <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005498:	7bbb      	ldrb	r3, [r7, #14]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00d      	beq.n	80054ba <USBD_StdEPReq+0x108>
 800549e:	7bbb      	ldrb	r3, [r7, #14]
 80054a0:	2b80      	cmp	r3, #128	; 0x80
 80054a2:	d00a      	beq.n	80054ba <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80054a4:	7bbb      	ldrb	r3, [r7, #14]
 80054a6:	4619      	mov	r1, r3
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f001 f859 	bl	8006560 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80054ae:	2180      	movs	r1, #128	; 0x80
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f001 f855 	bl	8006560 <USBD_LL_StallEP>
 80054b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80054b8:	e025      	b.n	8005506 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80054ba:	6839      	ldr	r1, [r7, #0]
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 fc09 	bl	8005cd4 <USBD_CtlError>
              break;
 80054c2:	e020      	b.n	8005506 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	885b      	ldrh	r3, [r3, #2]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d11b      	bne.n	8005504 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80054cc:	7bbb      	ldrb	r3, [r7, #14]
 80054ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d004      	beq.n	80054e0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80054d6:	7bbb      	ldrb	r3, [r7, #14]
 80054d8:	4619      	mov	r1, r3
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f001 f85f 	bl	800659e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 fcc2 	bl	8005e6a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	6839      	ldr	r1, [r7, #0]
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	4798      	blx	r3
 80054f4:	4603      	mov	r3, r0
 80054f6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80054f8:	e004      	b.n	8005504 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80054fa:	6839      	ldr	r1, [r7, #0]
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 fbe9 	bl	8005cd4 <USBD_CtlError>
              break;
 8005502:	e000      	b.n	8005506 <USBD_StdEPReq+0x154>
              break;
 8005504:	bf00      	nop
          }
          break;
 8005506:	e0ab      	b.n	8005660 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b02      	cmp	r3, #2
 8005512:	d002      	beq.n	800551a <USBD_StdEPReq+0x168>
 8005514:	2b03      	cmp	r3, #3
 8005516:	d032      	beq.n	800557e <USBD_StdEPReq+0x1cc>
 8005518:	e097      	b.n	800564a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800551a:	7bbb      	ldrb	r3, [r7, #14]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d007      	beq.n	8005530 <USBD_StdEPReq+0x17e>
 8005520:	7bbb      	ldrb	r3, [r7, #14]
 8005522:	2b80      	cmp	r3, #128	; 0x80
 8005524:	d004      	beq.n	8005530 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005526:	6839      	ldr	r1, [r7, #0]
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 fbd3 	bl	8005cd4 <USBD_CtlError>
                break;
 800552e:	e091      	b.n	8005654 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005530:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005534:	2b00      	cmp	r3, #0
 8005536:	da0b      	bge.n	8005550 <USBD_StdEPReq+0x19e>
 8005538:	7bbb      	ldrb	r3, [r7, #14]
 800553a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800553e:	4613      	mov	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	3310      	adds	r3, #16
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	4413      	add	r3, r2
 800554c:	3304      	adds	r3, #4
 800554e:	e00b      	b.n	8005568 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005550:	7bbb      	ldrb	r3, [r7, #14]
 8005552:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005556:	4613      	mov	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	4413      	add	r3, r2
 8005566:	3304      	adds	r3, #4
 8005568:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2200      	movs	r2, #0
 800556e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	2202      	movs	r2, #2
 8005574:	4619      	mov	r1, r3
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 fc1d 	bl	8005db6 <USBD_CtlSendData>
              break;
 800557c:	e06a      	b.n	8005654 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800557e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005582:	2b00      	cmp	r3, #0
 8005584:	da11      	bge.n	80055aa <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005586:	7bbb      	ldrb	r3, [r7, #14]
 8005588:	f003 020f 	and.w	r2, r3, #15
 800558c:	6879      	ldr	r1, [r7, #4]
 800558e:	4613      	mov	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	440b      	add	r3, r1
 8005598:	3324      	adds	r3, #36	; 0x24
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d117      	bne.n	80055d0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80055a0:	6839      	ldr	r1, [r7, #0]
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 fb96 	bl	8005cd4 <USBD_CtlError>
                  break;
 80055a8:	e054      	b.n	8005654 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80055aa:	7bbb      	ldrb	r3, [r7, #14]
 80055ac:	f003 020f 	and.w	r2, r3, #15
 80055b0:	6879      	ldr	r1, [r7, #4]
 80055b2:	4613      	mov	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	440b      	add	r3, r1
 80055bc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80055c0:	881b      	ldrh	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d104      	bne.n	80055d0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80055c6:	6839      	ldr	r1, [r7, #0]
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 fb83 	bl	8005cd4 <USBD_CtlError>
                  break;
 80055ce:	e041      	b.n	8005654 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80055d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	da0b      	bge.n	80055f0 <USBD_StdEPReq+0x23e>
 80055d8:	7bbb      	ldrb	r3, [r7, #14]
 80055da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80055de:	4613      	mov	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	3310      	adds	r3, #16
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	4413      	add	r3, r2
 80055ec:	3304      	adds	r3, #4
 80055ee:	e00b      	b.n	8005608 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80055f0:	7bbb      	ldrb	r3, [r7, #14]
 80055f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80055f6:	4613      	mov	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	4413      	add	r3, r2
 8005606:	3304      	adds	r3, #4
 8005608:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800560a:	7bbb      	ldrb	r3, [r7, #14]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <USBD_StdEPReq+0x264>
 8005610:	7bbb      	ldrb	r3, [r7, #14]
 8005612:	2b80      	cmp	r3, #128	; 0x80
 8005614:	d103      	bne.n	800561e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2200      	movs	r2, #0
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	e00e      	b.n	800563c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800561e:	7bbb      	ldrb	r3, [r7, #14]
 8005620:	4619      	mov	r1, r3
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 ffda 	bl	80065dc <USBD_LL_IsStallEP>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2201      	movs	r2, #1
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	e002      	b.n	800563c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2200      	movs	r2, #0
 800563a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2202      	movs	r2, #2
 8005640:	4619      	mov	r1, r3
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fbb7 	bl	8005db6 <USBD_CtlSendData>
              break;
 8005648:	e004      	b.n	8005654 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800564a:	6839      	ldr	r1, [r7, #0]
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 fb41 	bl	8005cd4 <USBD_CtlError>
              break;
 8005652:	bf00      	nop
          }
          break;
 8005654:	e004      	b.n	8005660 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005656:	6839      	ldr	r1, [r7, #0]
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 fb3b 	bl	8005cd4 <USBD_CtlError>
          break;
 800565e:	bf00      	nop
      }
      break;
 8005660:	e004      	b.n	800566c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005662:	6839      	ldr	r1, [r7, #0]
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 fb35 	bl	8005cd4 <USBD_CtlError>
      break;
 800566a:	bf00      	nop
  }

  return ret;
 800566c:	7bfb      	ldrb	r3, [r7, #15]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
	...

08005678 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005682:	2300      	movs	r3, #0
 8005684:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005686:	2300      	movs	r3, #0
 8005688:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800568a:	2300      	movs	r3, #0
 800568c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	885b      	ldrh	r3, [r3, #2]
 8005692:	0a1b      	lsrs	r3, r3, #8
 8005694:	b29b      	uxth	r3, r3
 8005696:	3b01      	subs	r3, #1
 8005698:	2b06      	cmp	r3, #6
 800569a:	f200 8128 	bhi.w	80058ee <USBD_GetDescriptor+0x276>
 800569e:	a201      	add	r2, pc, #4	; (adr r2, 80056a4 <USBD_GetDescriptor+0x2c>)
 80056a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a4:	080056c1 	.word	0x080056c1
 80056a8:	080056d9 	.word	0x080056d9
 80056ac:	08005719 	.word	0x08005719
 80056b0:	080058ef 	.word	0x080058ef
 80056b4:	080058ef 	.word	0x080058ef
 80056b8:	0800588f 	.word	0x0800588f
 80056bc:	080058bb 	.word	0x080058bb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	7c12      	ldrb	r2, [r2, #16]
 80056cc:	f107 0108 	add.w	r1, r7, #8
 80056d0:	4610      	mov	r0, r2
 80056d2:	4798      	blx	r3
 80056d4:	60f8      	str	r0, [r7, #12]
      break;
 80056d6:	e112      	b.n	80058fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	7c1b      	ldrb	r3, [r3, #16]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10d      	bne.n	80056fc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e8:	f107 0208 	add.w	r2, r7, #8
 80056ec:	4610      	mov	r0, r2
 80056ee:	4798      	blx	r3
 80056f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	3301      	adds	r3, #1
 80056f6:	2202      	movs	r2, #2
 80056f8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80056fa:	e100      	b.n	80058fe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005704:	f107 0208 	add.w	r2, r7, #8
 8005708:	4610      	mov	r0, r2
 800570a:	4798      	blx	r3
 800570c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	3301      	adds	r3, #1
 8005712:	2202      	movs	r2, #2
 8005714:	701a      	strb	r2, [r3, #0]
      break;
 8005716:	e0f2      	b.n	80058fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	885b      	ldrh	r3, [r3, #2]
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b05      	cmp	r3, #5
 8005720:	f200 80ac 	bhi.w	800587c <USBD_GetDescriptor+0x204>
 8005724:	a201      	add	r2, pc, #4	; (adr r2, 800572c <USBD_GetDescriptor+0xb4>)
 8005726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572a:	bf00      	nop
 800572c:	08005745 	.word	0x08005745
 8005730:	08005779 	.word	0x08005779
 8005734:	080057ad 	.word	0x080057ad
 8005738:	080057e1 	.word	0x080057e1
 800573c:	08005815 	.word	0x08005815
 8005740:	08005849 	.word	0x08005849
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00b      	beq.n	8005768 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	7c12      	ldrb	r2, [r2, #16]
 800575c:	f107 0108 	add.w	r1, r7, #8
 8005760:	4610      	mov	r0, r2
 8005762:	4798      	blx	r3
 8005764:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005766:	e091      	b.n	800588c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005768:	6839      	ldr	r1, [r7, #0]
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fab2 	bl	8005cd4 <USBD_CtlError>
            err++;
 8005770:	7afb      	ldrb	r3, [r7, #11]
 8005772:	3301      	adds	r3, #1
 8005774:	72fb      	strb	r3, [r7, #11]
          break;
 8005776:	e089      	b.n	800588c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00b      	beq.n	800579c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	7c12      	ldrb	r2, [r2, #16]
 8005790:	f107 0108 	add.w	r1, r7, #8
 8005794:	4610      	mov	r0, r2
 8005796:	4798      	blx	r3
 8005798:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800579a:	e077      	b.n	800588c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800579c:	6839      	ldr	r1, [r7, #0]
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 fa98 	bl	8005cd4 <USBD_CtlError>
            err++;
 80057a4:	7afb      	ldrb	r3, [r7, #11]
 80057a6:	3301      	adds	r3, #1
 80057a8:	72fb      	strb	r3, [r7, #11]
          break;
 80057aa:	e06f      	b.n	800588c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00b      	beq.n	80057d0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	7c12      	ldrb	r2, [r2, #16]
 80057c4:	f107 0108 	add.w	r1, r7, #8
 80057c8:	4610      	mov	r0, r2
 80057ca:	4798      	blx	r3
 80057cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057ce:	e05d      	b.n	800588c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057d0:	6839      	ldr	r1, [r7, #0]
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fa7e 	bl	8005cd4 <USBD_CtlError>
            err++;
 80057d8:	7afb      	ldrb	r3, [r7, #11]
 80057da:	3301      	adds	r3, #1
 80057dc:	72fb      	strb	r3, [r7, #11]
          break;
 80057de:	e055      	b.n	800588c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00b      	beq.n	8005804 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	7c12      	ldrb	r2, [r2, #16]
 80057f8:	f107 0108 	add.w	r1, r7, #8
 80057fc:	4610      	mov	r0, r2
 80057fe:	4798      	blx	r3
 8005800:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005802:	e043      	b.n	800588c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005804:	6839      	ldr	r1, [r7, #0]
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 fa64 	bl	8005cd4 <USBD_CtlError>
            err++;
 800580c:	7afb      	ldrb	r3, [r7, #11]
 800580e:	3301      	adds	r3, #1
 8005810:	72fb      	strb	r3, [r7, #11]
          break;
 8005812:	e03b      	b.n	800588c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00b      	beq.n	8005838 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	7c12      	ldrb	r2, [r2, #16]
 800582c:	f107 0108 	add.w	r1, r7, #8
 8005830:	4610      	mov	r0, r2
 8005832:	4798      	blx	r3
 8005834:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005836:	e029      	b.n	800588c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005838:	6839      	ldr	r1, [r7, #0]
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 fa4a 	bl	8005cd4 <USBD_CtlError>
            err++;
 8005840:	7afb      	ldrb	r3, [r7, #11]
 8005842:	3301      	adds	r3, #1
 8005844:	72fb      	strb	r3, [r7, #11]
          break;
 8005846:	e021      	b.n	800588c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00b      	beq.n	800586c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	7c12      	ldrb	r2, [r2, #16]
 8005860:	f107 0108 	add.w	r1, r7, #8
 8005864:	4610      	mov	r0, r2
 8005866:	4798      	blx	r3
 8005868:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800586a:	e00f      	b.n	800588c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800586c:	6839      	ldr	r1, [r7, #0]
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 fa30 	bl	8005cd4 <USBD_CtlError>
            err++;
 8005874:	7afb      	ldrb	r3, [r7, #11]
 8005876:	3301      	adds	r3, #1
 8005878:	72fb      	strb	r3, [r7, #11]
          break;
 800587a:	e007      	b.n	800588c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800587c:	6839      	ldr	r1, [r7, #0]
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 fa28 	bl	8005cd4 <USBD_CtlError>
          err++;
 8005884:	7afb      	ldrb	r3, [r7, #11]
 8005886:	3301      	adds	r3, #1
 8005888:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800588a:	bf00      	nop
      }
      break;
 800588c:	e037      	b.n	80058fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	7c1b      	ldrb	r3, [r3, #16]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d109      	bne.n	80058aa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800589c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589e:	f107 0208 	add.w	r2, r7, #8
 80058a2:	4610      	mov	r0, r2
 80058a4:	4798      	blx	r3
 80058a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80058a8:	e029      	b.n	80058fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80058aa:	6839      	ldr	r1, [r7, #0]
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fa11 	bl	8005cd4 <USBD_CtlError>
        err++;
 80058b2:	7afb      	ldrb	r3, [r7, #11]
 80058b4:	3301      	adds	r3, #1
 80058b6:	72fb      	strb	r3, [r7, #11]
      break;
 80058b8:	e021      	b.n	80058fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	7c1b      	ldrb	r3, [r3, #16]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10d      	bne.n	80058de <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ca:	f107 0208 	add.w	r2, r7, #8
 80058ce:	4610      	mov	r0, r2
 80058d0:	4798      	blx	r3
 80058d2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	3301      	adds	r3, #1
 80058d8:	2207      	movs	r2, #7
 80058da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80058dc:	e00f      	b.n	80058fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80058de:	6839      	ldr	r1, [r7, #0]
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f9f7 	bl	8005cd4 <USBD_CtlError>
        err++;
 80058e6:	7afb      	ldrb	r3, [r7, #11]
 80058e8:	3301      	adds	r3, #1
 80058ea:	72fb      	strb	r3, [r7, #11]
      break;
 80058ec:	e007      	b.n	80058fe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80058ee:	6839      	ldr	r1, [r7, #0]
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f9ef 	bl	8005cd4 <USBD_CtlError>
      err++;
 80058f6:	7afb      	ldrb	r3, [r7, #11]
 80058f8:	3301      	adds	r3, #1
 80058fa:	72fb      	strb	r3, [r7, #11]
      break;
 80058fc:	bf00      	nop
  }

  if (err != 0U)
 80058fe:	7afb      	ldrb	r3, [r7, #11]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d11e      	bne.n	8005942 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	88db      	ldrh	r3, [r3, #6]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d016      	beq.n	800593a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800590c:	893b      	ldrh	r3, [r7, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00e      	beq.n	8005930 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	88da      	ldrh	r2, [r3, #6]
 8005916:	893b      	ldrh	r3, [r7, #8]
 8005918:	4293      	cmp	r3, r2
 800591a:	bf28      	it	cs
 800591c:	4613      	movcs	r3, r2
 800591e:	b29b      	uxth	r3, r3
 8005920:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005922:	893b      	ldrh	r3, [r7, #8]
 8005924:	461a      	mov	r2, r3
 8005926:	68f9      	ldr	r1, [r7, #12]
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 fa44 	bl	8005db6 <USBD_CtlSendData>
 800592e:	e009      	b.n	8005944 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005930:	6839      	ldr	r1, [r7, #0]
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f9ce 	bl	8005cd4 <USBD_CtlError>
 8005938:	e004      	b.n	8005944 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fa95 	bl	8005e6a <USBD_CtlSendStatus>
 8005940:	e000      	b.n	8005944 <USBD_GetDescriptor+0x2cc>
    return;
 8005942:	bf00      	nop
  }
}
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop

0800594c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	889b      	ldrh	r3, [r3, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d131      	bne.n	80059c2 <USBD_SetAddress+0x76>
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	88db      	ldrh	r3, [r3, #6]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d12d      	bne.n	80059c2 <USBD_SetAddress+0x76>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	885b      	ldrh	r3, [r3, #2]
 800596a:	2b7f      	cmp	r3, #127	; 0x7f
 800596c:	d829      	bhi.n	80059c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	885b      	ldrh	r3, [r3, #2]
 8005972:	b2db      	uxtb	r3, r3
 8005974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005978:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b03      	cmp	r3, #3
 8005984:	d104      	bne.n	8005990 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005986:	6839      	ldr	r1, [r7, #0]
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f9a3 	bl	8005cd4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800598e:	e01d      	b.n	80059cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	7bfa      	ldrb	r2, [r7, #15]
 8005994:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005998:	7bfb      	ldrb	r3, [r7, #15]
 800599a:	4619      	mov	r1, r3
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 fe49 	bl	8006634 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fa61 	bl	8005e6a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d004      	beq.n	80059b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2202      	movs	r2, #2
 80059b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059b6:	e009      	b.n	80059cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059c0:	e004      	b.n	80059cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80059c2:	6839      	ldr	r1, [r7, #0]
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f985 	bl	8005cd4 <USBD_CtlError>
  }
}
 80059ca:	bf00      	nop
 80059cc:	bf00      	nop
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80059de:	2300      	movs	r3, #0
 80059e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	885b      	ldrh	r3, [r3, #2]
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	4b4c      	ldr	r3, [pc, #304]	; (8005b1c <USBD_SetConfig+0x148>)
 80059ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80059ec:	4b4b      	ldr	r3, [pc, #300]	; (8005b1c <USBD_SetConfig+0x148>)
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d905      	bls.n	8005a00 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80059f4:	6839      	ldr	r1, [r7, #0]
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f96c 	bl	8005cd4 <USBD_CtlError>
    return USBD_FAIL;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e088      	b.n	8005b12 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d002      	beq.n	8005a12 <USBD_SetConfig+0x3e>
 8005a0c:	2b03      	cmp	r3, #3
 8005a0e:	d025      	beq.n	8005a5c <USBD_SetConfig+0x88>
 8005a10:	e071      	b.n	8005af6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005a12:	4b42      	ldr	r3, [pc, #264]	; (8005b1c <USBD_SetConfig+0x148>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d01c      	beq.n	8005a54 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8005a1a:	4b40      	ldr	r3, [pc, #256]	; (8005b1c <USBD_SetConfig+0x148>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005a24:	4b3d      	ldr	r3, [pc, #244]	; (8005b1c <USBD_SetConfig+0x148>)
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	4619      	mov	r1, r3
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7ff f949 	bl	8004cc2 <USBD_SetClassConfig>
 8005a30:	4603      	mov	r3, r0
 8005a32:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005a34:	7bfb      	ldrb	r3, [r7, #15]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d004      	beq.n	8005a44 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8005a3a:	6839      	ldr	r1, [r7, #0]
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f949 	bl	8005cd4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005a42:	e065      	b.n	8005b10 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 fa10 	bl	8005e6a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2203      	movs	r2, #3
 8005a4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005a52:	e05d      	b.n	8005b10 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 fa08 	bl	8005e6a <USBD_CtlSendStatus>
      break;
 8005a5a:	e059      	b.n	8005b10 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005a5c:	4b2f      	ldr	r3, [pc, #188]	; (8005b1c <USBD_SetConfig+0x148>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d112      	bne.n	8005a8a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2202      	movs	r2, #2
 8005a68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005a6c:	4b2b      	ldr	r3, [pc, #172]	; (8005b1c <USBD_SetConfig+0x148>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	461a      	mov	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005a76:	4b29      	ldr	r3, [pc, #164]	; (8005b1c <USBD_SetConfig+0x148>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f7ff f93c 	bl	8004cfa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f9f1 	bl	8005e6a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005a88:	e042      	b.n	8005b10 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8005a8a:	4b24      	ldr	r3, [pc, #144]	; (8005b1c <USBD_SetConfig+0x148>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d02a      	beq.n	8005aee <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f7ff f92a 	bl	8004cfa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005aa6:	4b1d      	ldr	r3, [pc, #116]	; (8005b1c <USBD_SetConfig+0x148>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005ab0:	4b1a      	ldr	r3, [pc, #104]	; (8005b1c <USBD_SetConfig+0x148>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7ff f903 	bl	8004cc2 <USBD_SetClassConfig>
 8005abc:	4603      	mov	r3, r0
 8005abe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00f      	beq.n	8005ae6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8005ac6:	6839      	ldr	r1, [r7, #0]
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f903 	bl	8005cd4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7ff f90f 	bl	8004cfa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005ae4:	e014      	b.n	8005b10 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f9bf 	bl	8005e6a <USBD_CtlSendStatus>
      break;
 8005aec:	e010      	b.n	8005b10 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f9bb 	bl	8005e6a <USBD_CtlSendStatus>
      break;
 8005af4:	e00c      	b.n	8005b10 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005af6:	6839      	ldr	r1, [r7, #0]
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f8eb 	bl	8005cd4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005afe:	4b07      	ldr	r3, [pc, #28]	; (8005b1c <USBD_SetConfig+0x148>)
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	4619      	mov	r1, r3
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f7ff f8f8 	bl	8004cfa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	73fb      	strb	r3, [r7, #15]
      break;
 8005b0e:	bf00      	nop
  }

  return ret;
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	200001a0 	.word	0x200001a0

08005b20 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	88db      	ldrh	r3, [r3, #6]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d004      	beq.n	8005b3c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005b32:	6839      	ldr	r1, [r7, #0]
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f8cd 	bl	8005cd4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005b3a:	e023      	b.n	8005b84 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	dc02      	bgt.n	8005b4e <USBD_GetConfig+0x2e>
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	dc03      	bgt.n	8005b54 <USBD_GetConfig+0x34>
 8005b4c:	e015      	b.n	8005b7a <USBD_GetConfig+0x5a>
 8005b4e:	2b03      	cmp	r3, #3
 8005b50:	d00b      	beq.n	8005b6a <USBD_GetConfig+0x4a>
 8005b52:	e012      	b.n	8005b7a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	3308      	adds	r3, #8
 8005b5e:	2201      	movs	r2, #1
 8005b60:	4619      	mov	r1, r3
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f927 	bl	8005db6 <USBD_CtlSendData>
        break;
 8005b68:	e00c      	b.n	8005b84 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	2201      	movs	r2, #1
 8005b70:	4619      	mov	r1, r3
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f91f 	bl	8005db6 <USBD_CtlSendData>
        break;
 8005b78:	e004      	b.n	8005b84 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005b7a:	6839      	ldr	r1, [r7, #0]
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f8a9 	bl	8005cd4 <USBD_CtlError>
        break;
 8005b82:	bf00      	nop
}
 8005b84:	bf00      	nop
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d81e      	bhi.n	8005be2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	88db      	ldrh	r3, [r3, #6]
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d004      	beq.n	8005bb6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005bac:	6839      	ldr	r1, [r7, #0]
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f890 	bl	8005cd4 <USBD_CtlError>
        break;
 8005bb4:	e01a      	b.n	8005bec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d005      	beq.n	8005bd2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f043 0202 	orr.w	r2, r3, #2
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	330c      	adds	r3, #12
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	4619      	mov	r1, r3
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f8eb 	bl	8005db6 <USBD_CtlSendData>
      break;
 8005be0:	e004      	b.n	8005bec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005be2:	6839      	ldr	r1, [r7, #0]
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 f875 	bl	8005cd4 <USBD_CtlError>
      break;
 8005bea:	bf00      	nop
  }
}
 8005bec:	bf00      	nop
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	885b      	ldrh	r3, [r3, #2]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d106      	bne.n	8005c14 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f92b 	bl	8005e6a <USBD_CtlSendStatus>
  }
}
 8005c14:	bf00      	nop
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d80b      	bhi.n	8005c4c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	885b      	ldrh	r3, [r3, #2]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d10c      	bne.n	8005c56 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 f910 	bl	8005e6a <USBD_CtlSendStatus>
      }
      break;
 8005c4a:	e004      	b.n	8005c56 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005c4c:	6839      	ldr	r1, [r7, #0]
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f840 	bl	8005cd4 <USBD_CtlError>
      break;
 8005c54:	e000      	b.n	8005c58 <USBD_ClrFeature+0x3c>
      break;
 8005c56:	bf00      	nop
  }
}
 8005c58:	bf00      	nop
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	781a      	ldrb	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	781a      	ldrb	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3301      	adds	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f7ff fabc 	bl	8005208 <SWAPBYTE>
 8005c90:	4603      	mov	r3, r0
 8005c92:	461a      	mov	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f7ff faaf 	bl	8005208 <SWAPBYTE>
 8005caa:	4603      	mov	r3, r0
 8005cac:	461a      	mov	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f7ff faa2 	bl	8005208 <SWAPBYTE>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	80da      	strh	r2, [r3, #6]
}
 8005ccc:	bf00      	nop
 8005cce:	3710      	adds	r7, #16
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005cde:	2180      	movs	r1, #128	; 0x80
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 fc3d 	bl	8006560 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fc39 	bl	8006560 <USBD_LL_StallEP>
}
 8005cee:	bf00      	nop
 8005cf0:	3708      	adds	r7, #8
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b086      	sub	sp, #24
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	60f8      	str	r0, [r7, #12]
 8005cfe:	60b9      	str	r1, [r7, #8]
 8005d00:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d036      	beq.n	8005d7a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005d10:	6938      	ldr	r0, [r7, #16]
 8005d12:	f000 f836 	bl	8005d82 <USBD_GetLen>
 8005d16:	4603      	mov	r3, r0
 8005d18:	3301      	adds	r3, #1
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005d24:	7dfb      	ldrb	r3, [r7, #23]
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	4413      	add	r3, r2
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	7812      	ldrb	r2, [r2, #0]
 8005d2e:	701a      	strb	r2, [r3, #0]
  idx++;
 8005d30:	7dfb      	ldrb	r3, [r7, #23]
 8005d32:	3301      	adds	r3, #1
 8005d34:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005d36:	7dfb      	ldrb	r3, [r7, #23]
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	2203      	movs	r2, #3
 8005d3e:	701a      	strb	r2, [r3, #0]
  idx++;
 8005d40:	7dfb      	ldrb	r3, [r7, #23]
 8005d42:	3301      	adds	r3, #1
 8005d44:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005d46:	e013      	b.n	8005d70 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005d48:	7dfb      	ldrb	r3, [r7, #23]
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	7812      	ldrb	r2, [r2, #0]
 8005d52:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	3301      	adds	r3, #1
 8005d58:	613b      	str	r3, [r7, #16]
    idx++;
 8005d5a:	7dfb      	ldrb	r3, [r7, #23]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005d60:	7dfb      	ldrb	r3, [r7, #23]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	4413      	add	r3, r2
 8005d66:	2200      	movs	r2, #0
 8005d68:	701a      	strb	r2, [r3, #0]
    idx++;
 8005d6a:	7dfb      	ldrb	r3, [r7, #23]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1e7      	bne.n	8005d48 <USBD_GetString+0x52>
 8005d78:	e000      	b.n	8005d7c <USBD_GetString+0x86>
    return;
 8005d7a:	bf00      	nop
  }
}
 8005d7c:	3718      	adds	r7, #24
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b085      	sub	sp, #20
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005d92:	e005      	b.n	8005da0 <USBD_GetLen+0x1e>
  {
    len++;
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
 8005d96:	3301      	adds	r3, #1
 8005d98:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1f5      	bne.n	8005d94 <USBD_GetLen+0x12>
  }

  return len;
 8005da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b084      	sub	sp, #16
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	60f8      	str	r0, [r7, #12]
 8005dbe:	60b9      	str	r1, [r7, #8]
 8005dc0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	2100      	movs	r1, #0
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 fc48 	bl	8006672 <USBD_LL_Transmit>

  return USBD_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f000 fc37 	bl	8006672 <USBD_LL_Transmit>

  return USBD_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b084      	sub	sp, #16
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	60f8      	str	r0, [r7, #12]
 8005e16:	60b9      	str	r1, [r7, #8]
 8005e18:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2203      	movs	r2, #3
 8005e1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	2100      	movs	r1, #0
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 fc3b 	bl	80066b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	2100      	movs	r1, #0
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f000 fc2a 	bl	80066b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b082      	sub	sp, #8
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2204      	movs	r2, #4
 8005e76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	2100      	movs	r1, #0
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fbf6 	bl	8006672 <USBD_LL_Transmit>

  return USBD_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2205      	movs	r2, #5
 8005e9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fc04 	bl	80066b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3708      	adds	r7, #8
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
	...

08005eb8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	4912      	ldr	r1, [pc, #72]	; (8005f08 <MX_USB_DEVICE_Init+0x50>)
 8005ec0:	4812      	ldr	r0, [pc, #72]	; (8005f0c <MX_USB_DEVICE_Init+0x54>)
 8005ec2:	f7fe fe90 	bl	8004be6 <USBD_Init>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005ecc:	f7fa fc66 	bl	800079c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8005ed0:	490f      	ldr	r1, [pc, #60]	; (8005f10 <MX_USB_DEVICE_Init+0x58>)
 8005ed2:	480e      	ldr	r0, [pc, #56]	; (8005f0c <MX_USB_DEVICE_Init+0x54>)
 8005ed4:	f7fe feb7 	bl	8004c46 <USBD_RegisterClass>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005ede:	f7fa fc5d 	bl	800079c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8005ee2:	490c      	ldr	r1, [pc, #48]	; (8005f14 <MX_USB_DEVICE_Init+0x5c>)
 8005ee4:	4809      	ldr	r0, [pc, #36]	; (8005f0c <MX_USB_DEVICE_Init+0x54>)
 8005ee6:	f7fe fe69 	bl	8004bbc <USBD_CUSTOM_HID_RegisterInterface>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d001      	beq.n	8005ef4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005ef0:	f7fa fc54 	bl	800079c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005ef4:	4805      	ldr	r0, [pc, #20]	; (8005f0c <MX_USB_DEVICE_Init+0x54>)
 8005ef6:	f7fe fecd 	bl	8004c94 <USBD_Start>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d001      	beq.n	8005f04 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005f00:	f7fa fc4c 	bl	800079c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005f04:	bf00      	nop
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	20000134 	.word	0x20000134
 8005f0c:	20000208 	.word	0x20000208
 8005f10:	2000000c 	.word	0x2000000c
 8005f14:	20000124 	.word	0x20000124

08005f18 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005f1c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8005f2c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	4603      	mov	r3, r0
 8005f40:	460a      	mov	r2, r1
 8005f42:	71fb      	strb	r3, [r7, #7]
 8005f44:	4613      	mov	r3, r2
 8005f46:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 8005f48:	4803      	ldr	r0, [pc, #12]	; (8005f58 <CUSTOM_HID_OutEvent_FS+0x20>)
 8005f4a:	f7fe fde9 	bl	8004b20 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 8005f4e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	20000208 	.word	0x20000208

08005f5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	4603      	mov	r3, r0
 8005f64:	6039      	str	r1, [r7, #0]
 8005f66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	2212      	movs	r2, #18
 8005f6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005f6e:	4b03      	ldr	r3, [pc, #12]	; (8005f7c <USBD_FS_DeviceDescriptor+0x20>)
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	20000150 	.word	0x20000150

08005f80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	4603      	mov	r3, r0
 8005f88:	6039      	str	r1, [r7, #0]
 8005f8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	2204      	movs	r2, #4
 8005f90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005f92:	4b03      	ldr	r3, [pc, #12]	; (8005fa0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	20000164 	.word	0x20000164

08005fa4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	4603      	mov	r3, r0
 8005fac:	6039      	str	r1, [r7, #0]
 8005fae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005fb0:	79fb      	ldrb	r3, [r7, #7]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d105      	bne.n	8005fc2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005fb6:	683a      	ldr	r2, [r7, #0]
 8005fb8:	4907      	ldr	r1, [pc, #28]	; (8005fd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8005fba:	4808      	ldr	r0, [pc, #32]	; (8005fdc <USBD_FS_ProductStrDescriptor+0x38>)
 8005fbc:	f7ff fe9b 	bl	8005cf6 <USBD_GetString>
 8005fc0:	e004      	b.n	8005fcc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	4904      	ldr	r1, [pc, #16]	; (8005fd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8005fc6:	4805      	ldr	r0, [pc, #20]	; (8005fdc <USBD_FS_ProductStrDescriptor+0x38>)
 8005fc8:	f7ff fe95 	bl	8005cf6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005fcc:	4b02      	ldr	r3, [pc, #8]	; (8005fd8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	200004d8 	.word	0x200004d8
 8005fdc:	080067f0 	.word	0x080067f0

08005fe0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	6039      	str	r1, [r7, #0]
 8005fea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	4904      	ldr	r1, [pc, #16]	; (8006000 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005ff0:	4804      	ldr	r0, [pc, #16]	; (8006004 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005ff2:	f7ff fe80 	bl	8005cf6 <USBD_GetString>
  return USBD_StrDesc;
 8005ff6:	4b02      	ldr	r3, [pc, #8]	; (8006000 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	200004d8 	.word	0x200004d8
 8006004:	080067f8 	.word	0x080067f8

08006008 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	4603      	mov	r3, r0
 8006010:	6039      	str	r1, [r7, #0]
 8006012:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	221a      	movs	r2, #26
 8006018:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800601a:	f000 f843 	bl	80060a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800601e:	4b02      	ldr	r3, [pc, #8]	; (8006028 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006020:	4618      	mov	r0, r3
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	20000168 	.word	0x20000168

0800602c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	4603      	mov	r3, r0
 8006034:	6039      	str	r1, [r7, #0]
 8006036:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006038:	79fb      	ldrb	r3, [r7, #7]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d105      	bne.n	800604a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	4907      	ldr	r1, [pc, #28]	; (8006060 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006042:	4808      	ldr	r0, [pc, #32]	; (8006064 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006044:	f7ff fe57 	bl	8005cf6 <USBD_GetString>
 8006048:	e004      	b.n	8006054 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	4904      	ldr	r1, [pc, #16]	; (8006060 <USBD_FS_ConfigStrDescriptor+0x34>)
 800604e:	4805      	ldr	r0, [pc, #20]	; (8006064 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006050:	f7ff fe51 	bl	8005cf6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006054:	4b02      	ldr	r3, [pc, #8]	; (8006060 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006056:	4618      	mov	r0, r3
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	200004d8 	.word	0x200004d8
 8006064:	08006804 	.word	0x08006804

08006068 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	4603      	mov	r3, r0
 8006070:	6039      	str	r1, [r7, #0]
 8006072:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006074:	79fb      	ldrb	r3, [r7, #7]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d105      	bne.n	8006086 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	4907      	ldr	r1, [pc, #28]	; (800609c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800607e:	4808      	ldr	r0, [pc, #32]	; (80060a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006080:	f7ff fe39 	bl	8005cf6 <USBD_GetString>
 8006084:	e004      	b.n	8006090 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	4904      	ldr	r1, [pc, #16]	; (800609c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800608a:	4805      	ldr	r0, [pc, #20]	; (80060a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800608c:	f7ff fe33 	bl	8005cf6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006090:	4b02      	ldr	r3, [pc, #8]	; (800609c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006092:	4618      	mov	r0, r3
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	200004d8 	.word	0x200004d8
 80060a0:	08006818 	.word	0x08006818

080060a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80060aa:	4b0f      	ldr	r3, [pc, #60]	; (80060e8 <Get_SerialNum+0x44>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80060b0:	4b0e      	ldr	r3, [pc, #56]	; (80060ec <Get_SerialNum+0x48>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80060b6:	4b0e      	ldr	r3, [pc, #56]	; (80060f0 <Get_SerialNum+0x4c>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4413      	add	r3, r2
 80060c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d009      	beq.n	80060de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80060ca:	2208      	movs	r2, #8
 80060cc:	4909      	ldr	r1, [pc, #36]	; (80060f4 <Get_SerialNum+0x50>)
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f000 f814 	bl	80060fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80060d4:	2204      	movs	r2, #4
 80060d6:	4908      	ldr	r1, [pc, #32]	; (80060f8 <Get_SerialNum+0x54>)
 80060d8:	68b8      	ldr	r0, [r7, #8]
 80060da:	f000 f80f 	bl	80060fc <IntToUnicode>
  }
}
 80060de:	bf00      	nop
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	1fff7a10 	.word	0x1fff7a10
 80060ec:	1fff7a14 	.word	0x1fff7a14
 80060f0:	1fff7a18 	.word	0x1fff7a18
 80060f4:	2000016a 	.word	0x2000016a
 80060f8:	2000017a 	.word	0x2000017a

080060fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	4613      	mov	r3, r2
 8006108:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800610a:	2300      	movs	r3, #0
 800610c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800610e:	2300      	movs	r3, #0
 8006110:	75fb      	strb	r3, [r7, #23]
 8006112:	e027      	b.n	8006164 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	0f1b      	lsrs	r3, r3, #28
 8006118:	2b09      	cmp	r3, #9
 800611a:	d80b      	bhi.n	8006134 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	0f1b      	lsrs	r3, r3, #28
 8006120:	b2da      	uxtb	r2, r3
 8006122:	7dfb      	ldrb	r3, [r7, #23]
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	4619      	mov	r1, r3
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	440b      	add	r3, r1
 800612c:	3230      	adds	r2, #48	; 0x30
 800612e:	b2d2      	uxtb	r2, r2
 8006130:	701a      	strb	r2, [r3, #0]
 8006132:	e00a      	b.n	800614a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	0f1b      	lsrs	r3, r3, #28
 8006138:	b2da      	uxtb	r2, r3
 800613a:	7dfb      	ldrb	r3, [r7, #23]
 800613c:	005b      	lsls	r3, r3, #1
 800613e:	4619      	mov	r1, r3
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	440b      	add	r3, r1
 8006144:	3237      	adds	r2, #55	; 0x37
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	011b      	lsls	r3, r3, #4
 800614e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006150:	7dfb      	ldrb	r3, [r7, #23]
 8006152:	005b      	lsls	r3, r3, #1
 8006154:	3301      	adds	r3, #1
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	4413      	add	r3, r2
 800615a:	2200      	movs	r2, #0
 800615c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800615e:	7dfb      	ldrb	r3, [r7, #23]
 8006160:	3301      	adds	r3, #1
 8006162:	75fb      	strb	r3, [r7, #23]
 8006164:	7dfa      	ldrb	r2, [r7, #23]
 8006166:	79fb      	ldrb	r3, [r7, #7]
 8006168:	429a      	cmp	r2, r3
 800616a:	d3d3      	bcc.n	8006114 <IntToUnicode+0x18>
  }
}
 800616c:	bf00      	nop
 800616e:	bf00      	nop
 8006170:	371c      	adds	r7, #28
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
	...

0800617c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b08a      	sub	sp, #40	; 0x28
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006184:	f107 0314 	add.w	r3, r7, #20
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]
 800618c:	605a      	str	r2, [r3, #4]
 800618e:	609a      	str	r2, [r3, #8]
 8006190:	60da      	str	r2, [r3, #12]
 8006192:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800619c:	d13a      	bne.n	8006214 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800619e:	2300      	movs	r3, #0
 80061a0:	613b      	str	r3, [r7, #16]
 80061a2:	4b1e      	ldr	r3, [pc, #120]	; (800621c <HAL_PCD_MspInit+0xa0>)
 80061a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a6:	4a1d      	ldr	r2, [pc, #116]	; (800621c <HAL_PCD_MspInit+0xa0>)
 80061a8:	f043 0301 	orr.w	r3, r3, #1
 80061ac:	6313      	str	r3, [r2, #48]	; 0x30
 80061ae:	4b1b      	ldr	r3, [pc, #108]	; (800621c <HAL_PCD_MspInit+0xa0>)
 80061b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	613b      	str	r3, [r7, #16]
 80061b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80061ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80061be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061c0:	2302      	movs	r3, #2
 80061c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061c4:	2300      	movs	r3, #0
 80061c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061c8:	2303      	movs	r3, #3
 80061ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80061cc:	230a      	movs	r3, #10
 80061ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061d0:	f107 0314 	add.w	r3, r7, #20
 80061d4:	4619      	mov	r1, r3
 80061d6:	4812      	ldr	r0, [pc, #72]	; (8006220 <HAL_PCD_MspInit+0xa4>)
 80061d8:	f7fa fd8e 	bl	8000cf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80061dc:	4b0f      	ldr	r3, [pc, #60]	; (800621c <HAL_PCD_MspInit+0xa0>)
 80061de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e0:	4a0e      	ldr	r2, [pc, #56]	; (800621c <HAL_PCD_MspInit+0xa0>)
 80061e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e6:	6353      	str	r3, [r2, #52]	; 0x34
 80061e8:	2300      	movs	r3, #0
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	4b0b      	ldr	r3, [pc, #44]	; (800621c <HAL_PCD_MspInit+0xa0>)
 80061ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f0:	4a0a      	ldr	r2, [pc, #40]	; (800621c <HAL_PCD_MspInit+0xa0>)
 80061f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061f6:	6453      	str	r3, [r2, #68]	; 0x44
 80061f8:	4b08      	ldr	r3, [pc, #32]	; (800621c <HAL_PCD_MspInit+0xa0>)
 80061fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006200:	60fb      	str	r3, [r7, #12]
 8006202:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006204:	2200      	movs	r2, #0
 8006206:	2100      	movs	r1, #0
 8006208:	2043      	movs	r0, #67	; 0x43
 800620a:	f7fa fd3e 	bl	8000c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800620e:	2043      	movs	r0, #67	; 0x43
 8006210:	f7fa fd57 	bl	8000cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006214:	bf00      	nop
 8006216:	3728      	adds	r7, #40	; 0x28
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	40023800 	.word	0x40023800
 8006220:	40020000 	.word	0x40020000

08006224 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006238:	4619      	mov	r1, r3
 800623a:	4610      	mov	r0, r2
 800623c:	f7fe fd75 	bl	8004d2a <USBD_LL_SetupStage>
}
 8006240:	bf00      	nop
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	460b      	mov	r3, r1
 8006252:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800625a:	78fa      	ldrb	r2, [r7, #3]
 800625c:	6879      	ldr	r1, [r7, #4]
 800625e:	4613      	mov	r3, r2
 8006260:	00db      	lsls	r3, r3, #3
 8006262:	1a9b      	subs	r3, r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	440b      	add	r3, r1
 8006268:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	78fb      	ldrb	r3, [r7, #3]
 8006270:	4619      	mov	r1, r3
 8006272:	f7fe fdaf 	bl	8004dd4 <USBD_LL_DataOutStage>
}
 8006276:	bf00      	nop
 8006278:	3708      	adds	r7, #8
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b082      	sub	sp, #8
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	460b      	mov	r3, r1
 8006288:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006290:	78fa      	ldrb	r2, [r7, #3]
 8006292:	6879      	ldr	r1, [r7, #4]
 8006294:	4613      	mov	r3, r2
 8006296:	00db      	lsls	r3, r3, #3
 8006298:	1a9b      	subs	r3, r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	440b      	add	r3, r1
 800629e:	3348      	adds	r3, #72	; 0x48
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	78fb      	ldrb	r3, [r7, #3]
 80062a4:	4619      	mov	r1, r3
 80062a6:	f7fe fdf8 	bl	8004e9a <USBD_LL_DataInStage>
}
 80062aa:	bf00      	nop
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b082      	sub	sp, #8
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fe ff0c 	bl	80050de <USBD_LL_SOF>
}
 80062c6:	bf00      	nop
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b084      	sub	sp, #16
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80062d6:	2301      	movs	r3, #1
 80062d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d102      	bne.n	80062e8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80062e2:	2300      	movs	r3, #0
 80062e4:	73fb      	strb	r3, [r7, #15]
 80062e6:	e008      	b.n	80062fa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d102      	bne.n	80062f6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80062f0:	2301      	movs	r3, #1
 80062f2:	73fb      	strb	r3, [r7, #15]
 80062f4:	e001      	b.n	80062fa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80062f6:	f7fa fa51 	bl	800079c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006300:	7bfa      	ldrb	r2, [r7, #15]
 8006302:	4611      	mov	r1, r2
 8006304:	4618      	mov	r0, r3
 8006306:	f7fe feac 	bl	8005062 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006310:	4618      	mov	r0, r3
 8006312:	f7fe fe58 	bl	8004fc6 <USBD_LL_Reset>
}
 8006316:	bf00      	nop
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
	...

08006320 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800632e:	4618      	mov	r0, r3
 8006330:	f7fe fea7 	bl	8005082 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6812      	ldr	r2, [r2, #0]
 8006342:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006346:	f043 0301 	orr.w	r3, r3, #1
 800634a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a1b      	ldr	r3, [r3, #32]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d005      	beq.n	8006360 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006354:	4b04      	ldr	r3, [pc, #16]	; (8006368 <HAL_PCD_SuspendCallback+0x48>)
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	4a03      	ldr	r2, [pc, #12]	; (8006368 <HAL_PCD_SuspendCallback+0x48>)
 800635a:	f043 0306 	orr.w	r3, r3, #6
 800635e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006360:	bf00      	nop
 8006362:	3708      	adds	r7, #8
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	e000ed00 	.word	0xe000ed00

0800636c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800637a:	4618      	mov	r0, r3
 800637c:	f7fe fe97 	bl	80050ae <USBD_LL_Resume>
}
 8006380:	bf00      	nop
 8006382:	3708      	adds	r7, #8
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	460b      	mov	r3, r1
 8006392:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800639a:	78fa      	ldrb	r2, [r7, #3]
 800639c:	4611      	mov	r1, r2
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fe fee5 	bl	800516e <USBD_LL_IsoOUTIncomplete>
}
 80063a4:	bf00      	nop
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	460b      	mov	r3, r1
 80063b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80063be:	78fa      	ldrb	r2, [r7, #3]
 80063c0:	4611      	mov	r1, r2
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7fe fead 	bl	8005122 <USBD_LL_IsoINIncomplete>
}
 80063c8:	bf00      	nop
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fe feeb 	bl	80051ba <USBD_LL_DevConnected>
}
 80063e4:	bf00      	nop
 80063e6:	3708      	adds	r7, #8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fe fee8 	bl	80051d0 <USBD_LL_DevDisconnected>
}
 8006400:	bf00      	nop
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d13c      	bne.n	8006492 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006418:	4a20      	ldr	r2, [pc, #128]	; (800649c <USBD_LL_Init+0x94>)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a1e      	ldr	r2, [pc, #120]	; (800649c <USBD_LL_Init+0x94>)
 8006424:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006428:	4b1c      	ldr	r3, [pc, #112]	; (800649c <USBD_LL_Init+0x94>)
 800642a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800642e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006430:	4b1a      	ldr	r3, [pc, #104]	; (800649c <USBD_LL_Init+0x94>)
 8006432:	2204      	movs	r2, #4
 8006434:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006436:	4b19      	ldr	r3, [pc, #100]	; (800649c <USBD_LL_Init+0x94>)
 8006438:	2202      	movs	r2, #2
 800643a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800643c:	4b17      	ldr	r3, [pc, #92]	; (800649c <USBD_LL_Init+0x94>)
 800643e:	2200      	movs	r2, #0
 8006440:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006442:	4b16      	ldr	r3, [pc, #88]	; (800649c <USBD_LL_Init+0x94>)
 8006444:	2202      	movs	r2, #2
 8006446:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006448:	4b14      	ldr	r3, [pc, #80]	; (800649c <USBD_LL_Init+0x94>)
 800644a:	2200      	movs	r2, #0
 800644c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800644e:	4b13      	ldr	r3, [pc, #76]	; (800649c <USBD_LL_Init+0x94>)
 8006450:	2200      	movs	r2, #0
 8006452:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006454:	4b11      	ldr	r3, [pc, #68]	; (800649c <USBD_LL_Init+0x94>)
 8006456:	2200      	movs	r2, #0
 8006458:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800645a:	4b10      	ldr	r3, [pc, #64]	; (800649c <USBD_LL_Init+0x94>)
 800645c:	2200      	movs	r2, #0
 800645e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006460:	4b0e      	ldr	r3, [pc, #56]	; (800649c <USBD_LL_Init+0x94>)
 8006462:	2200      	movs	r2, #0
 8006464:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006466:	480d      	ldr	r0, [pc, #52]	; (800649c <USBD_LL_Init+0x94>)
 8006468:	f7fa fdfb 	bl	8001062 <HAL_PCD_Init>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006472:	f7fa f993 	bl	800079c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006476:	2180      	movs	r1, #128	; 0x80
 8006478:	4808      	ldr	r0, [pc, #32]	; (800649c <USBD_LL_Init+0x94>)
 800647a:	f7fb ff40 	bl	80022fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800647e:	2240      	movs	r2, #64	; 0x40
 8006480:	2100      	movs	r1, #0
 8006482:	4806      	ldr	r0, [pc, #24]	; (800649c <USBD_LL_Init+0x94>)
 8006484:	f7fb fef4 	bl	8002270 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006488:	2280      	movs	r2, #128	; 0x80
 800648a:	2101      	movs	r1, #1
 800648c:	4803      	ldr	r0, [pc, #12]	; (800649c <USBD_LL_Init+0x94>)
 800648e:	f7fb feef 	bl	8002270 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	200006d8 	.word	0x200006d8

080064a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064a8:	2300      	movs	r3, #0
 80064aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fa fef0 	bl	800129c <HAL_PCD_Start>
 80064bc:	4603      	mov	r3, r0
 80064be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064c0:	7bfb      	ldrb	r3, [r7, #15]
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 f930 	bl	8006728 <USBD_Get_USB_Status>
 80064c8:	4603      	mov	r3, r0
 80064ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80064cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b084      	sub	sp, #16
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	4608      	mov	r0, r1
 80064e0:	4611      	mov	r1, r2
 80064e2:	461a      	mov	r2, r3
 80064e4:	4603      	mov	r3, r0
 80064e6:	70fb      	strb	r3, [r7, #3]
 80064e8:	460b      	mov	r3, r1
 80064ea:	70bb      	strb	r3, [r7, #2]
 80064ec:	4613      	mov	r3, r2
 80064ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064f0:	2300      	movs	r3, #0
 80064f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80064fe:	78bb      	ldrb	r3, [r7, #2]
 8006500:	883a      	ldrh	r2, [r7, #0]
 8006502:	78f9      	ldrb	r1, [r7, #3]
 8006504:	f7fb fad4 	bl	8001ab0 <HAL_PCD_EP_Open>
 8006508:	4603      	mov	r3, r0
 800650a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800650c:	7bfb      	ldrb	r3, [r7, #15]
 800650e:	4618      	mov	r0, r3
 8006510:	f000 f90a 	bl	8006728 <USBD_Get_USB_Status>
 8006514:	4603      	mov	r3, r0
 8006516:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006518:	7bbb      	ldrb	r3, [r7, #14]
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b084      	sub	sp, #16
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
 800652a:	460b      	mov	r3, r1
 800652c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800652e:	2300      	movs	r3, #0
 8006530:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006532:	2300      	movs	r3, #0
 8006534:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800653c:	78fa      	ldrb	r2, [r7, #3]
 800653e:	4611      	mov	r1, r2
 8006540:	4618      	mov	r0, r3
 8006542:	f7fb fb1d 	bl	8001b80 <HAL_PCD_EP_Close>
 8006546:	4603      	mov	r3, r0
 8006548:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800654a:	7bfb      	ldrb	r3, [r7, #15]
 800654c:	4618      	mov	r0, r3
 800654e:	f000 f8eb 	bl	8006728 <USBD_Get_USB_Status>
 8006552:	4603      	mov	r3, r0
 8006554:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006556:	7bbb      	ldrb	r3, [r7, #14]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	460b      	mov	r3, r1
 800656a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800656c:	2300      	movs	r3, #0
 800656e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006570:	2300      	movs	r3, #0
 8006572:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800657a:	78fa      	ldrb	r2, [r7, #3]
 800657c:	4611      	mov	r1, r2
 800657e:	4618      	mov	r0, r3
 8006580:	f7fb fbdd 	bl	8001d3e <HAL_PCD_EP_SetStall>
 8006584:	4603      	mov	r3, r0
 8006586:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006588:	7bfb      	ldrb	r3, [r7, #15]
 800658a:	4618      	mov	r0, r3
 800658c:	f000 f8cc 	bl	8006728 <USBD_Get_USB_Status>
 8006590:	4603      	mov	r3, r0
 8006592:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006594:	7bbb      	ldrb	r3, [r7, #14]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b084      	sub	sp, #16
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	460b      	mov	r3, r1
 80065a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80065b8:	78fa      	ldrb	r2, [r7, #3]
 80065ba:	4611      	mov	r1, r2
 80065bc:	4618      	mov	r0, r3
 80065be:	f7fb fc22 	bl	8001e06 <HAL_PCD_EP_ClrStall>
 80065c2:	4603      	mov	r3, r0
 80065c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065c6:	7bfb      	ldrb	r3, [r7, #15]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 f8ad 	bl	8006728 <USBD_Get_USB_Status>
 80065ce:	4603      	mov	r3, r0
 80065d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	460b      	mov	r3, r1
 80065e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80065ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80065f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	da0b      	bge.n	8006610 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80065f8:	78fb      	ldrb	r3, [r7, #3]
 80065fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065fe:	68f9      	ldr	r1, [r7, #12]
 8006600:	4613      	mov	r3, r2
 8006602:	00db      	lsls	r3, r3, #3
 8006604:	1a9b      	subs	r3, r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	440b      	add	r3, r1
 800660a:	333e      	adds	r3, #62	; 0x3e
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	e00b      	b.n	8006628 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006610:	78fb      	ldrb	r3, [r7, #3]
 8006612:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006616:	68f9      	ldr	r1, [r7, #12]
 8006618:	4613      	mov	r3, r2
 800661a:	00db      	lsls	r3, r3, #3
 800661c:	1a9b      	subs	r3, r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	440b      	add	r3, r1
 8006622:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006626:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006628:	4618      	mov	r0, r3
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	460b      	mov	r3, r1
 800663e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006640:	2300      	movs	r3, #0
 8006642:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006644:	2300      	movs	r3, #0
 8006646:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800664e:	78fa      	ldrb	r2, [r7, #3]
 8006650:	4611      	mov	r1, r2
 8006652:	4618      	mov	r0, r3
 8006654:	f7fb fa07 	bl	8001a66 <HAL_PCD_SetAddress>
 8006658:	4603      	mov	r3, r0
 800665a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800665c:	7bfb      	ldrb	r3, [r7, #15]
 800665e:	4618      	mov	r0, r3
 8006660:	f000 f862 	bl	8006728 <USBD_Get_USB_Status>
 8006664:	4603      	mov	r3, r0
 8006666:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006668:	7bbb      	ldrb	r3, [r7, #14]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b086      	sub	sp, #24
 8006676:	af00      	add	r7, sp, #0
 8006678:	60f8      	str	r0, [r7, #12]
 800667a:	607a      	str	r2, [r7, #4]
 800667c:	603b      	str	r3, [r7, #0]
 800667e:	460b      	mov	r3, r1
 8006680:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006682:	2300      	movs	r3, #0
 8006684:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006690:	7af9      	ldrb	r1, [r7, #11]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	f7fb fb08 	bl	8001caa <HAL_PCD_EP_Transmit>
 800669a:	4603      	mov	r3, r0
 800669c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800669e:	7dfb      	ldrb	r3, [r7, #23]
 80066a0:	4618      	mov	r0, r3
 80066a2:	f000 f841 	bl	8006728 <USBD_Get_USB_Status>
 80066a6:	4603      	mov	r3, r0
 80066a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80066aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3718      	adds	r7, #24
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	607a      	str	r2, [r7, #4]
 80066be:	603b      	str	r3, [r7, #0]
 80066c0:	460b      	mov	r3, r1
 80066c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066c4:	2300      	movs	r3, #0
 80066c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80066d2:	7af9      	ldrb	r1, [r7, #11]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	f7fb fa9c 	bl	8001c14 <HAL_PCD_EP_Receive>
 80066dc:	4603      	mov	r3, r0
 80066de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066e0:	7dfb      	ldrb	r3, [r7, #23]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 f820 	bl	8006728 <USBD_Get_USB_Status>
 80066e8:	4603      	mov	r3, r0
 80066ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80066ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3718      	adds	r7, #24
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
	...

080066f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8006700:	4b03      	ldr	r3, [pc, #12]	; (8006710 <USBD_static_malloc+0x18>)
}
 8006702:	4618      	mov	r0, r3
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	200001a4 	.word	0x200001a4

08006714 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]

}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	4603      	mov	r3, r0
 8006730:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006732:	2300      	movs	r3, #0
 8006734:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006736:	79fb      	ldrb	r3, [r7, #7]
 8006738:	2b03      	cmp	r3, #3
 800673a:	d817      	bhi.n	800676c <USBD_Get_USB_Status+0x44>
 800673c:	a201      	add	r2, pc, #4	; (adr r2, 8006744 <USBD_Get_USB_Status+0x1c>)
 800673e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006742:	bf00      	nop
 8006744:	08006755 	.word	0x08006755
 8006748:	0800675b 	.word	0x0800675b
 800674c:	08006761 	.word	0x08006761
 8006750:	08006767 	.word	0x08006767
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006754:	2300      	movs	r3, #0
 8006756:	73fb      	strb	r3, [r7, #15]
    break;
 8006758:	e00b      	b.n	8006772 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800675a:	2303      	movs	r3, #3
 800675c:	73fb      	strb	r3, [r7, #15]
    break;
 800675e:	e008      	b.n	8006772 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006760:	2301      	movs	r3, #1
 8006762:	73fb      	strb	r3, [r7, #15]
    break;
 8006764:	e005      	b.n	8006772 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006766:	2303      	movs	r3, #3
 8006768:	73fb      	strb	r3, [r7, #15]
    break;
 800676a:	e002      	b.n	8006772 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800676c:	2303      	movs	r3, #3
 800676e:	73fb      	strb	r3, [r7, #15]
    break;
 8006770:	bf00      	nop
  }
  return usb_status;
 8006772:	7bfb      	ldrb	r3, [r7, #15]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <__libc_init_array>:
 8006780:	b570      	push	{r4, r5, r6, lr}
 8006782:	4d0d      	ldr	r5, [pc, #52]	; (80067b8 <__libc_init_array+0x38>)
 8006784:	4c0d      	ldr	r4, [pc, #52]	; (80067bc <__libc_init_array+0x3c>)
 8006786:	1b64      	subs	r4, r4, r5
 8006788:	10a4      	asrs	r4, r4, #2
 800678a:	2600      	movs	r6, #0
 800678c:	42a6      	cmp	r6, r4
 800678e:	d109      	bne.n	80067a4 <__libc_init_array+0x24>
 8006790:	4d0b      	ldr	r5, [pc, #44]	; (80067c0 <__libc_init_array+0x40>)
 8006792:	4c0c      	ldr	r4, [pc, #48]	; (80067c4 <__libc_init_array+0x44>)
 8006794:	f000 f820 	bl	80067d8 <_init>
 8006798:	1b64      	subs	r4, r4, r5
 800679a:	10a4      	asrs	r4, r4, #2
 800679c:	2600      	movs	r6, #0
 800679e:	42a6      	cmp	r6, r4
 80067a0:	d105      	bne.n	80067ae <__libc_init_array+0x2e>
 80067a2:	bd70      	pop	{r4, r5, r6, pc}
 80067a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80067a8:	4798      	blx	r3
 80067aa:	3601      	adds	r6, #1
 80067ac:	e7ee      	b.n	800678c <__libc_init_array+0xc>
 80067ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80067b2:	4798      	blx	r3
 80067b4:	3601      	adds	r6, #1
 80067b6:	e7f2      	b.n	800679e <__libc_init_array+0x1e>
 80067b8:	08006850 	.word	0x08006850
 80067bc:	08006850 	.word	0x08006850
 80067c0:	08006850 	.word	0x08006850
 80067c4:	08006854 	.word	0x08006854

080067c8 <memset>:
 80067c8:	4402      	add	r2, r0
 80067ca:	4603      	mov	r3, r0
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d100      	bne.n	80067d2 <memset+0xa>
 80067d0:	4770      	bx	lr
 80067d2:	f803 1b01 	strb.w	r1, [r3], #1
 80067d6:	e7f9      	b.n	80067cc <memset+0x4>

080067d8 <_init>:
 80067d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067da:	bf00      	nop
 80067dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067de:	bc08      	pop	{r3}
 80067e0:	469e      	mov	lr, r3
 80067e2:	4770      	bx	lr

080067e4 <_fini>:
 80067e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e6:	bf00      	nop
 80067e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ea:	bc08      	pop	{r3}
 80067ec:	469e      	mov	lr, r3
 80067ee:	4770      	bx	lr
